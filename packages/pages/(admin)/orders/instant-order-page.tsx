'use client';

import { ArrowLeft, ChevronLeft, ChevronRight, Check } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useState, useCallback, useMemo, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { toast } from 'sonner';
import type { GetTariffDTOWithArchived } from '@shared/api/tariffs';
import type { GetLocationDTO } from '@entities/locations/interface';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ
interface RoutePoint {
  id: string;
  location: GetLocationDTO | null;
  type: 'start' | 'end' | 'intermediate';
  label: string;
}
import { useOrderData } from '@shared/hooks/useOrderData';
import { Button } from '@shared/ui/forms/button';
import { Card, CardContent } from '@shared/ui/layout/card';
import { SidebarHeader } from '@shared/ui/layout/sidebar';
import { useInstantOrderSubmit, useInstantOrderById } from '@entities/orders/hooks';
import type { PassengerDTO } from '@entities/orders/interface';
import {
  TariffPricingTab,
  MapTab,
} from './tabs';
import { SummaryTab } from './tabs/summary-tab';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
interface SelectedService {
  serviceId?: string;
  id?: string;
  quantity: number;
  notes?: string | null;
  name?: string;
  price?: number;
}

interface InstantOrderPageProps {
  mode: 'create' | 'edit';
  id?: string; // ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

export function InstantOrderPage({ mode, id }: InstantOrderPageProps) {
  const router = useRouter();

  // React Hook Form –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MapTab (–∫–∞–∫ –≤ order-page.tsx)
  const methods = useForm<{
    startLocationId: string;
    endLocationId: string;
    additionalStops: string[];
  }>({
    defaultValues: {
      startLocationId: '',
      endLocationId: '',
      additionalStops: [],
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const {
    order: orderData,
    isLoading: isLoadingOrder,
    error: orderError
  } = useInstantOrderById(id, { enabled: mode === 'edit' });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const [activeTab, setActiveTab] = useState('pricing');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
  const [visitedTabs, setVisitedTabs] = useState<Set<string>>(new Set(['pricing']));

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const [selectedTariff, setSelectedTariff] = useState<GetTariffDTOWithArchived | null>(null);
  const [selectedServices, _setSelectedServices] = useState<SelectedService[]>([]);
  // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ passengers - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
  const [routePoints, setRoutePoints] = useState<RoutePoint[]>([
    { id: '1', location: null, type: 'start', label: '–û—Ç–∫—É–¥–∞' },
    { id: '2', location: null, type: 'end', label: '–ö—É–¥–∞' },
  ]);
  const [currentPrice, setCurrentPrice] = useState<number>(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ü–µ–Ω—ã
  const [useCustomPrice, setUseCustomPrice] = useState<boolean>(false);
  const [customPrice, setCustomPrice] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
  const [startLocationId, setStartLocationId] = useState<string | null>(null);
  const [endLocationId, setEndLocationId] = useState<string | null>(null);
  const [additionalStops, setAdditionalStops] = useState<string[]>([]);
  const [routeDistance, setRouteDistance] = useState<number>(0);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  const [routeLoading, setRouteLoading] = useState<boolean>(false);

  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    // eslint-disable-next-line no-console
    console.log('üõ£Ô∏è RouteDistance –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', routeDistance);
  }, [routeDistance]);

  // –£–±–∏—Ä–∞–µ–º useEffect –æ—Ç—Å—é–¥–∞ - –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º –ø–æ—Å–ª–µ useOrderData

  // –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const { createOrder, isLoading: isCreatingOrder } = useInstantOrderSubmit({
    onSuccess: (order) => {
      // eslint-disable-next-line no-console
      console.log('‚úÖ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', order);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!)
      router.push('/orders');
    },
    onError: (error) => {
      // eslint-disable-next-line no-console
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error.message}`);
    },
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
  const {
    tariffs,
    services,
    users,
    isLoading,
    error,
  } = useOrderData();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (mode === 'edit' && orderData && tariffs.length > 0) {
      // eslint-disable-next-line no-console
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderData);

      // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
      if (orderData.tariffId) {
        const foundTariff = tariffs.find(t => t.id === orderData.tariffId);

        if (foundTariff) {
          setSelectedTariff(foundTariff);
        }
      }

      // 2. –ü–∞—Å—Å–∞–∂–∏—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ - –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

      // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
      if (orderData.initialPrice) {
        setCurrentPrice(orderData.initialPrice);
      }

      // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–ö–ê–ö –í order-page.tsx!)
      if (orderData.startLocationId) {
        setStartLocationId(orderData.startLocationId);
        methods.setValue('startLocationId', orderData.startLocationId); // –î–õ–Ø MapTab!
      }

      if (orderData.endLocationId) {
        setEndLocationId(orderData.endLocationId);
        methods.setValue('endLocationId', orderData.endLocationId); // –î–õ–Ø MapTab!
      }

      if (orderData.additionalStops) {
        setAdditionalStops(orderData.additionalStops);
        methods.setValue('additionalStops', orderData.additionalStops); // –î–õ–Ø MapTab!
      }

      // 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º routePoints –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ MapTab
      // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç useOrderLocations –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      if (routePoints.length === 0) {
        // eslint-disable-next-line no-console
        console.log('üó∫Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º routePoints –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
          startLocationId: orderData.startLocationId,
          endLocationId: orderData.endLocationId,
          additionalStops: orderData.additionalStops,
          mode
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º routePoints, —á—Ç–æ–±—ã useOrderLocations –∑–∞–Ω–æ–≤–æ –∏—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª
        setRoutePoints([]);
      }
    }
  }, [mode, orderData, tariffs, routePoints.length, methods]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ –¥–æ–ø. —É—Å–ª—É–≥)
  const tabs = [
    { id: 'pricing', label: '–¢–∞—Ä–∏—Ñ—ã/–¶–µ–Ω—ã', component: TariffPricingTab },
    { id: 'map', label: '–ö–∞—Ä—Ç–∞', component: MapTab },
    { id: 'summary', label: '–ò—Ç–æ–≥–∏', component: SummaryTab },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleTariffChange = useCallback((tariff: GetTariffDTOWithArchived | null) => {
    setSelectedTariff(tariff);
  }, []);



  // –£–±–∏—Ä–∞–µ–º handlePassengersChange - –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ

  const handleRouteChange = useCallback((newRoutePoints: RoutePoint[]) => {
    setRoutePoints(newRoutePoints);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
    const startPoint = newRoutePoints.find(p => p.type === 'start');
    const endPoint = newRoutePoints.find(p => p.type === 'end');
    const intermediatePoints = newRoutePoints.filter(p => p.type === 'intermediate');

    setStartLocationId(startPoint?.location?.id || null);
    setEndLocationId(endPoint?.location?.id || null);
    setAdditionalStops(intermediatePoints.map(p => p.location?.id).filter(Boolean) as string[]);
  }, []);



  // –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–±–æ–≤
  const isTabValid = (tabId: string): boolean => {
    switch (tabId) {
      case 'pricing':
        return !!selectedTariff;
      // –£–±–∏—Ä–∞–µ–º case 'passengers' - –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
      case 'map':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        if (routeLoading) {
          return false;
        }

        // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã —Ç–æ—á–∫–∏ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ API)
        return routePoints.length >= 2;
      case 'summary':
        return !!isReadyToCreate;
      default:
        return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
  const goToTab = (tabId: string) => {
    setActiveTab(tabId);
    setVisitedTabs(prev => new Set([...prev, tabId]));
  };

  const goToNextTab = () => {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–±–∞ map - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    if (activeTab === 'map' && (!routeDistance || routeDistance === 0)) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', {
        description: 'API —Ä–æ—É—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é.',
        duration: 5000,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–±–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    if (!isTabValid(activeTab)) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–±–∞
      switch (activeTab) {
        case 'pricing':
          toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', {
            description: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ'
          });
          break;
        case 'passengers':
          toast.error('–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', {
            description: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞'
          });
          break;
        case 'map':
          if (routeLoading) {
            toast.error('–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', {
              description: '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞'
            });
          } else {
            toast.error('–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç', {
              description: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
            });
          }
          break;
        default:
          toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', {
            description: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
          });
      }

      return;
    }

    const currentIndex = tabs.findIndex(tab => tab.id === activeTab);

    if (currentIndex < tabs.length - 1) {
      const nextTab = tabs[currentIndex + 1];

      goToTab(nextTab.id);
    }
  };

  const goToPreviousTab = () => {
    const currentIndex = tabs.findIndex(tab => tab.id === activeTab);

    if (currentIndex > 0) {
      const prevTab = tabs[currentIndex - 1];

      goToTab(prevTab.id);
    }
  };

  const canGoNext = (): boolean => {
    const currentIndex = tabs.findIndex(tab => tab.id === activeTab);

    return currentIndex < tabs.length - 1 && isTabValid(activeTab);
  };

  const canGoPrevious = (): boolean => {
    const currentIndex = tabs.findIndex(tab => tab.id === activeTab);

    return currentIndex > 0;
  };

  const handleBack = () => {
    router.push('/orders');
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (selectedTariff && routeDistance > 0) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¢–û–ß–ù–û –¢–ê–ö –ñ–ï –∫–∞–∫ –≤ summary-tab.tsx
      const apiDistanceKm = routeDistance / 1000;
      const roundedDistanceKm = Math.round(apiDistanceKm * 10) / 10; // –¢–ê–ö–û–ï –ñ–ï –û–ö–†–£–ì–õ–ï–ù–ò–ï!
      const calculatedPrice = selectedTariff.basePrice + (roundedDistanceKm * selectedTariff.perKmPrice);

      setCurrentPrice(Math.round(calculatedPrice));

      // eslint-disable-next-line no-console
      console.log('üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ü–µ–Ω–∞ (–∫–∞–∫ –≤ summary-tab):', {
        basePrice: selectedTariff.basePrice,
        rawDistanceKm: apiDistanceKm.toFixed(3),
        roundedDistanceKm: roundedDistanceKm,
        perKmPrice: selectedTariff.perKmPrice,
        totalPrice: Math.round(calculatedPrice)
      });
    } else if (selectedTariff && routeDistance === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
      setCurrentPrice(selectedTariff.basePrice);

      // eslint-disable-next-line no-console
      console.log('üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É (–Ω–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è):', selectedTariff.basePrice);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞, —Ü–µ–Ω–∞ = 0
      setCurrentPrice(0);
    }
  }, [selectedTariff, routeDistance]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤)
  const isReadyToCreate = useMemo(() => {
    return (
      selectedTariff &&
      routePoints.length >= 2 &&
      currentPrice > 0
    );
  }, [selectedTariff, routePoints, currentPrice]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const handleSave = async () => {
    if (!isReadyToCreate) {
      // eslint-disable-next-line no-console
      console.warn('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');

      return;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      const orderData = {
        tariffId: selectedTariff!.id,
        routeId: null, // –î–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        startLocationId,
        endLocationId,
        additionalStops,
        services: selectedServices
          .filter((service: SelectedService) => service.serviceId || service.id)
          .map((service: SelectedService) => ({
            serviceId: service.serviceId || service.id!,
            quantity: service.quantity || 1,
            notes: service.notes || null,
          })),
        initialPrice: currentPrice,
        passengers: [
          {
            customerId: null,
            firstName: "",
            lastName: null,
            isMainPassenger: true
          }
        ],
        paymentId: null, // –î–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ null
      };

      // eslint-disable-next-line no-console
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:', orderData);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      createOrder(orderData);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
  };

  if (isLoading || isLoadingOrder) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
          <div>{mode === 'edit' ? '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'}</div>
        </div>
      </div>
    );
  }

  if (error || orderError) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center text-red-600">
          <div className="text-lg font-semibold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
          <div>{error || orderError?.message}</div>
        </div>
      </div>
    );
  }

  return (
    <div className='flex flex-col border rounded-2xl h-full overflow-hidden bg-white'>
      {/* Header */}
      <SidebarHeader className='sticky top-0 z-10 bg-gray-50 border-b flex items-start justify-between px-4 py-4 flex-row'>
        <div className='flex items-center gap-4'>
          <Button variant='ghost' size='sm' onClick={handleBack} className='gap-2'>
            <ArrowLeft className='h-4 w-4' />
            –ù–∞–∑–∞–¥
          </Button>
          <div className='text-left'>
            <h1 className='text-3xl font-bold tracking-tight text-left'>
              {mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑' : '–°–æ–∑–¥–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑'}
            </h1>
            <p className='text-gray-600 mt-1'>
              {mode === 'edit' ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞' : '–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ'}
            </p>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}

      </SidebarHeader>

      <div className='flex flex-col overflow-y-auto pl-4 pr-2 h-full'>
        {/* Tabs */}
        <Card className='flex-1 h-full'>
          <CardContent className='px-0'>
            <div className='w-full h-full'>
              {(() => {
                  const activeTabData = tabs.find(tab => tab.id === activeTab);

                  if (!activeTabData) return null;

                  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                  switch (activeTab) {
                    case 'pricing':
                      return (
                        <TariffPricingTab
                          tariffs={tariffs}
                          selectedTariff={selectedTariff}
                          setSelectedTariff={handleTariffChange}
                        />
                      );

                    case 'map':
                      return (
                        <MapTab
                          mode={mode}
                          onRouteChange={handleRouteChange}
                          // –ò–°–ü–û–õ–¨–ó–£–ï–ú methods –ö–ê–ö –í order-page.tsx!
                          startLocationId={methods.getValues('startLocationId')}
                          endLocationId={methods.getValues('endLocationId')}
                          additionalStops={methods.getValues('additionalStops')}
                          // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
                          routePoints={routePoints}
                          setRoutePoints={setRoutePoints}
                          onRouteDistanceChange={setRouteDistance}
                          onRouteLoadingChange={setRouteLoading}
                          // –î–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ä–∞–¥–∏—É—Å–æ–º
                          showDriverRadius
                          isInstantOrder
                        />
                      );



                    // –£–±–∏—Ä–∞–µ–º case 'passengers' - –ø–∞—Å—Å–∞–∂–∏—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ



                    case 'summary':
                      return (
                        <SummaryTab
                          tariffs={tariffs}
                          services={services}
                          users={users}
                          routeState={{
                            routePoints: routePoints
                          }}
                          pricing={{}}
                          selectedTariff={selectedTariff}
                          selectedServices={selectedServices}
                          currentPrice={currentPrice}
                          passengers={[
                            {
                              customerId: null,
                              firstName: "",
                              lastName: null,
                              isMainPassenger: true
                            }
                          ]}
                          routeLocations={[]}
                          routeDistance={routeDistance > 0 ? routeDistance : undefined} // –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                          methods={{
                            setValue: () => {},
                            getValues: (key?: string) => {
                              if (key === 'scheduledTime') return new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                              if (key === 'departureTime') return '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ'; // –î–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                              if (key === 'description') return '–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑';

                              return '';
                            }
                          }}
                          mode={mode}
                          orderId={undefined}
                          isInstantOrder
                          useCustomPrice={useCustomPrice}
                          setUseCustomPrice={setUseCustomPrice}
                          customPrice={customPrice}
                          setCustomPrice={setCustomPrice}
                        />
                      );

                    default:
                      return <div>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
                  }
                })()}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –§—É—Ç–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º */}
      <div className='sticky bottom-0 bg-white border-t border-gray-200 px-4 py-3'>
        <div className='flex items-center justify-between'>
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
          <div className='flex items-center gap-3'>
            {tabs.map((tab, index) => {
              const isActive = activeTab === tab.id;
              const isCompleted = visitedTabs.has(tab.id) && isTabValid(tab.id) && !isActive;
              const isAccessible = index <= tabs.findIndex(t => t.id === activeTab);

              return (
                <div key={tab.id} className='flex items-center'>
                  {/* –ö—Ä—É–∂–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –≥–∞–ª–æ—á–∫–æ–π */}
                  <button
                    onClick={() => isAccessible && goToTab(tab.id)}
                    disabled={!isAccessible}
                    className={`relative flex items-center justify-center w-8 h-8 rounded-full border-2 transition-all ${
                      isActive
                        ? 'bg-primary border-primary text-primary-foreground shadow-sm'
                        : isCompleted
                          ? 'bg-green-500 border-green-500 text-white'
                          : isAccessible
                            ? 'bg-white border-gray-300 text-gray-700 hover:border-gray-400'
                            : 'bg-gray-100 border-gray-200 text-gray-400 cursor-not-allowed'
                    }`}
                  >
                    {isCompleted ? (
                      <Check className='h-4 w-4' />
                    ) : (
                      <span className='text-xs font-medium'>{index + 1}</span>
                    )}
                  </button>

                  {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É –∫—Ä—É–∂–∫–∞–º–∏ */}
                  {index < tabs.length - 1 && (
                    <div
                      className={`w-12 h-0.5 mx-2 transition-colors ${
                        index < tabs.findIndex(t => t.id === activeTab)
                          ? 'bg-green-500'
                          : 'bg-gray-200'
                      }`}
                    />
                  )}
                </div>
              );
            })}
          </div>

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ */}
          <div className='ml-4'>
            <p className='text-sm font-medium text-gray-900'>
              –®–∞–≥ {tabs.findIndex(t => t.id === activeTab) + 1} –∏–∑ {tabs.length}
            </p>
            <p className='text-xs text-gray-500'>{tabs.find(t => t.id === activeTab)?.label}</p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∞ */}
          <div className='flex items-center gap-3'>
            <Button
              variant='outline'
              onClick={goToPreviousTab}
              disabled={!canGoPrevious()}
              className='flex items-center gap-2'
            >
              <ChevronLeft className='h-4 w-4' />
              –ù–∞–∑–∞–¥
            </Button>

            {activeTab === 'summary' ? (
              <Button
                onClick={handleSave}
                className='flex items-center gap-2 bg-green-600 hover:bg-green-700'
                disabled={isCreatingOrder}
              >
                <Check className='h-4 w-4' />
                {isCreatingOrder
                  ? (mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞–Ω–∏–µ...')
                  : (mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑')
                }
              </Button>
            ) : (
              <Button
                onClick={goToNextTab}
                className={`flex items-center gap-2 ${!canGoNext() ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                –í–ø–µ—Ä–µ–¥
                <ChevronRight className='h-4 w-4' />
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
