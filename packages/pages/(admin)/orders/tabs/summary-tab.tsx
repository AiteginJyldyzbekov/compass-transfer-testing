'use client';

import {
  DollarSign,
  Users,
  MapPin,
  Calendar,
  Clock,
  Plane,
  FileText,
  User,
  Phone,
  Star,
  Car,
  Hash,
  Tag,
  Palette,
  CalendarDays,
  UserCheck,
  Shield,
  X,
  AlertTriangle,
} from 'lucide-react';
import { useState, useEffect } from 'react';
import { Badge } from '@shared/ui/data-display/badge';
import { Button } from '@shared/ui/forms/button';
import { Checkbox } from '@shared/ui/forms/checkbox';
import { Input } from '@shared/ui/forms/input';
import { Label } from '@shared/ui/forms/label';
import { Textarea } from '@shared/ui/forms/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@shared/ui/layout/card';
import { CarTypeValues, type CarType } from '@entities/tariffs/enums/CarType.enum';
import { ServiceClassValues, type ServiceClass } from '@entities/tariffs/enums/ServiceClass.enum';

interface SummaryTabProps {
  tariffs: any[];
  services: any[];
  users: any[];
  routeState: any;
  pricing: any;
  selectedTariff: any;
  selectedServices: any[];
  currentPrice: number;
  passengers: any[];
  routeLocations: any[];
  routeDistance?: number; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö
  methods: any;
  mode: 'create' | 'edit';
  orderId?: string;
  selectedDriver?: any; // –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  getDriverById?: (id: string) => Record<string, unknown> | null;
  updateDriverCache?: (id: string, data: Record<string, unknown>) => void;
  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–Ω–∞
  useCustomPrice?: boolean;
  setUseCustomPrice?: (value: boolean) => void;
  customPrice?: string;
  setCustomPrice?: (value: string) => void;

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
  onTabChange?: (tab: string) => void;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  orderStatus?: string;
  setOrderStatus?: (status: string) => void;
  // –§–ª–∞–≥ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  isInstantOrder?: boolean;
}

export function SummaryTab({
  selectedTariff,
  selectedServices,
  currentPrice: _currentPrice,
  passengers,
  routeLocations: _routeLocations,
  routeState,
  routeDistance,
  methods,
  mode: _mode,
  orderId: _orderId,
  selectedDriver,
  getDriverById,
  updateDriverCache: _updateDriverCache,
  useCustomPrice = false,
  setUseCustomPrice,
  customPrice = '',
  setCustomPrice,
  orderStatus: _orderStatus,
  setOrderStatus: _setOrderStatus,
  onTabChange,
  isInstantOrder = false,
}: SummaryTabProps) {
  // –£–±–∏—Ä–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ routeDistance –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
  const [notes, setNotes] = useState('');
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  const [showRouteWarningModal, setShowRouteWarningModal] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const savedNotes = methods.getValues('notes');

    if (savedNotes && savedNotes !== notes) {
      setNotes(savedNotes);
    }
  }, [methods, notes]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Ç–∞–± –±–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (!routeDistance || routeDistance === 0) {
      setShowRouteWarningModal(true);
    }
  }, []); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const getServiceClassTranslation = (serviceClass: string): string => {
    const translation = ServiceClassValues[serviceClass as ServiceClass] || serviceClass;

    // eslint-disable-next-line no-console
    console.log('üéØ –ü–µ—Ä–µ–≤–æ–¥ –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:', { serviceClass, translation });

    return translation;
  };

  const getCarTypeTranslation = (carType: string): string => {
    const translation = CarTypeValues[carType as CarType] || carType;

    // eslint-disable-next-line no-console
    console.log('üöó –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –∞–≤—Ç–æ:', { carType, translation });

    return translation;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
  const handleMainPassengerChange = (selectedIndex: number) => {
    const updatedPassengers = passengers.map((passenger, index) => ({
      ...passenger,
      isMainPassenger: index === selectedIndex,
    }));

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ methods
    if (methods) {
      methods.setValue('passengers', updatedPassengers);
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'KGS',
      minimumFractionDigits: 0,
      maximumFractionDigits: 2,
    }).format(price);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  // –£–±–∏—Ä–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ routeDistance –∏–∑ map-tab

  // –£–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SegmentDistance - –Ω–µ –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const getRouteDistanceKm = () => {
    // eslint-disable-next-line no-console
    console.log('üîç getRouteDistanceKm –≤—ã–∑–≤–∞–Ω–∞, routeDistance:', routeDistance);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ map-tab (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ routingService)
    if (routeDistance && routeDistance > 0) {
      const apiDistanceKm = routeDistance / 1000;

      // eslint-disable-next-line no-console
      console.log('üìè –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ map-tab:', apiDistanceKm);

      return Math.round(apiDistanceKm * 10) / 10;
    }

    // –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–û–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï! –ù–ò–ö–û–ì–î–ê! –°–£–ö–ê!
    // eslint-disable-next-line no-console
    console.error('‚ùå –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    return 0;
  };

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  const calculateTotalPrice = () => {
    if (!selectedTariff) return 0;

    const distance = getRouteDistanceKm();
    const perKmPrice = selectedTariff.perKmPrice || 0;
    const basePrice = selectedTariff.basePrice || 0;

    const distancePrice = distance * perKmPrice;
    const servicesPrice = selectedServices.reduce(
      (sum, service) => sum + (service.price || 0) * (service.quantity || 1),
      0,
    );

    return Math.round(basePrice + distancePrice + servicesPrice);
  };

  return (
    <div className='space-y-6'>
      {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
      <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
        {/* –ú–∞—Ä—à—Ä—É—Ç */}
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center gap-2'>
              <MapPin className='h-5 w-5' />
              –ú–∞—Ä—à—Ä—É—Ç
            </CardTitle>
          </CardHeader>
          <CardContent>
            {routeState?.routePoints?.filter((point: any) => point.location).length > 0 ? (
              <div className='space-y-1'>
                {routeState.routePoints
                  .filter((point: any) => point.location)
                  .map((point: any, index: number, filteredPoints: any[]) => {
                    return (
                      <div key={point.id}>
                        {/* –¢–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ */}
                        <div className='flex items-start gap-3 py-2'>
                          <div
                            className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold ${
                              index === 0
                                ? 'bg-green-500'
                                : index === filteredPoints.length - 1
                                  ? 'bg-red-500'
                                  : 'bg-blue-500'
                            }`}
                          >
                            {String.fromCharCode(65 + index)}
                          </div>
                          <div className='flex-1'>
                            <p className='font-medium text-sm'>{point.location.name}</p>
                            <p className='text-xs text-gray-500'>{point.location.address}</p>
                          </div>
                        </div>

                        {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (–±–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∏–∑ map-tab) */}
                        {index < filteredPoints.length - 1 && (
                          <div className='flex items-center gap-3 py-1 ml-3'>
                            <div className='w-6 flex justify-center'>
                              <div className='w-px h-4 bg-gray-300' />
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}

                {/* –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ */}
                <div className='mt-4 pt-3 border-t border-gray-200'>
                  <div className='flex items-center justify-between text-sm'>
                    <span className='text-gray-600'>–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</span>
                    <span className='font-medium'>{getRouteDistanceKm()} –∫–º</span>
                  </div>
                </div>
              </div>
            ) : (
              <p className='text-muted-foreground'>–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–¥–∞–Ω</p>
            )}
          </CardContent>
        </Card>

        {/* –ü–∞—Å—Å–∞–∂–∏—Ä—ã */}
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center justify-between'>
              <div className='flex items-center gap-2'>
                <Users className='h-5 w-5' />
                –ü–∞—Å—Å–∞–∂–∏—Ä—ã
              </div>
              <Badge variant='secondary' className='bg-blue-100 text-blue-800'>
                {passengers.length}{' '}
                {passengers.length === 1
                  ? '–ø–∞—Å—Å–∞–∂–∏—Ä'
                  : passengers.length < 5
                    ? '–ø–∞—Å—Å–∞–∂–∏—Ä–∞'
                    : '–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'}
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {passengers.length > 0 ? (
              <div className='space-y-4'>
                {/* –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ */}
                <div
                  className={`space-y-3 ${passengers.length > 4 ? 'max-h-96 overflow-y-auto pr-2' : ''}`}
                >
                  {passengers.map((passenger, index) => (
                    <div
                      key={index}
                      className='group relative overflow-hidden rounded-lg border bg-card p-4 transition-all hover:shadow-md'
                    >
                      <div className='flex items-start gap-4'>
                        {/* –ê–≤–∞—Ç–∞—Ä */}
                        <div className='relative'>
                          <div
                            className={`flex h-12 w-12 items-center justify-center rounded-full text-lg font-semibold text-white ${
                              passenger.isMainPassenger
                                ? 'bg-gradient-to-br from-blue-500 to-blue-600'
                                : 'bg-gradient-to-br from-slate-400 to-slate-500'
                            }`}
                          >
                            {(passenger.firstName?.[0] || '?').toUpperCase()}
                          </div>
                          {passenger.isMainPassenger && (
                            <div className='absolute -bottom-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-blue-500 text-white'>
                              <UserCheck className='h-3 w-3' />
                            </div>
                          )}
                        </div>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ */}
                        <div className='flex-1 space-y-2'>
                          <div className='flex items-center gap-2'>
                            <h4 className='font-semibold text-foreground'>
                              {passenger.firstName} {passenger.lastName || ''}
                            </h4>
                            {passenger.isMainPassenger && (
                              <Badge
                                variant='secondary'
                                className='bg-blue-100 text-blue-700 text-xs'
                              >
                                –û—Å–Ω–æ–≤–Ω–æ–π
                              </Badge>
                            )}
                          </div>

                          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                          <div className='flex flex-wrap gap-4 text-sm text-muted-foreground'>
                            {passenger.phoneNumber && (
                              <div className='flex items-center gap-1'>
                                <Phone className='h-3 w-3' />
                                {passenger.phoneNumber}
                              </div>
                            )}
                            {passenger.email && (
                              <div className='flex items-center gap-1'>
                                <span className='text-xs'>‚úâÔ∏è</span>
                                {passenger.email}
                              </div>
                            )}
                          </div>
                        </div>

                        {/* –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ */}
                        <div className='flex items-center gap-2'>
                          <input
                            type='radio'
                            id={`main-passenger-${index}`}
                            name='mainPassenger'
                            checked={passenger.isMainPassenger}
                            onChange={() => handleMainPassengerChange(index)}
                            className='h-4 w-4 border-gray-300 text-blue-600 focus:ring-2 focus:ring-blue-500'
                          />
                          <label
                            htmlFor={`main-passenger-${index}`}
                            className='cursor-pointer text-xs text-muted-foreground'
                          >
                            –û—Å–Ω–æ–≤–Ω–æ–π
                          </label>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className='flex flex-col items-center justify-center py-12 text-center'>
                <div className='rounded-full bg-muted p-3'>
                  <Users className='h-8 w-8 text-muted-foreground' />
                </div>
                <h3 className='mt-4 text-sm font-semibold text-foreground'>
                  –ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
                </h3>
                <p className='mt-2 text-sm text-muted-foreground'>
                  –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ç–∞–±–µ
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center gap-2'>
              <Calendar className='h-5 w-5' />
              –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className='space-y-4'>
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–∞—Ö */}
              {(methods.getValues('airFlight') || methods.getValues('flyReis')) && (
                <div className='flex flex-row gap-4'>
                  {methods.getValues('airFlight') && (
                    <div className='w-full flex items-center gap-3 p-3 bg-gray-50 rounded-lg'>
                      <Plane className='h-5 w-5 text-blue-600' />
                      <div>
                        <p className='text-sm text-gray-600'>–†–µ–π—Å –≤—ã–ª–µ—Ç–∞</p>
                        <p className='font-medium'>{methods.getValues('airFlight')}</p>
                      </div>
                    </div>
                  )}
                  {methods.getValues('flyReis') && (
                    <div className='w-full flex items-center gap-3 p-3 bg-gray-50 rounded-lg'>
                      <Plane className='h-5 w-5 text-green-600' />
                      <div>
                        <p className='text-sm text-gray-600'>–†–µ–π—Å –ø—Ä–∏–ª–µ—Ç–∞</p>
                        <p className='font-medium'>{methods.getValues('flyReis')}</p>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* –ó–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–π—Å–∞–º - —Å–∫—Ä—ã—Ç–æ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ */}
              {!isInstantOrder && methods.getValues('description') && (
                <div className='bg-amber-50 border border-amber-200 rounded-lg p-4'>
                  <div className='flex items-start gap-3'>
                    <div className='w-10 h-10 bg-amber-500 rounded-full flex items-center justify-center flex-shrink-0'>
                      <FileText className='h-5 w-5 text-white' />
                    </div>
                    <div className='flex-1'>
                      <p className='text-sm text-amber-700 font-medium mb-1'>
                        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ–µ–∑–¥–∫–µ
                      </p>
                      <p className='text-sm text-amber-800 leading-relaxed whitespace-pre-wrap'>
                        {methods.getValues('description')}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ */}
              <div className='bg-blue-50 border border-blue-200 rounded-lg p-4'>
                <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                  {methods.getValues('scheduledTime') && (
                    <div className='flex items-center gap-3'>
                      <div className='w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center'>
                        <Calendar className='h-5 w-5 text-white' />
                      </div>
                      <div>
                        <p className='text-sm text-gray-600'>–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</p>
                        <p className='font-medium'>
                          {formatDate(new Date(methods.getValues('scheduledTime')))}
                        </p>
                      </div>
                    </div>
                  )}
                  {methods.getValues('departureTime') && (
                    <div className='flex items-center gap-3'>
                      <div className='w-10 h-10 bg-green-500 rounded-full flex items-center justify-center'>
                        <Clock className='h-5 w-5 text-white' />
                      </div>
                      <div>
                        <p className='text-sm text-gray-600'>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏</p>
                        <p className='font-medium'>{methods.getValues('departureTime')}</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ - —Å–∫—Ä—ã—Ç–æ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ */}
              {!isInstantOrder && selectedDriver ? (
                (() => {
                  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
                  const fullDriverData = getDriverById ? getDriverById(selectedDriver.id) : null;
                  const driverInfo = fullDriverData || selectedDriver;

                  return (
                    <div className='rounded-lg border bg-card p-4'>
                      <div className='flex flex-col items-start gap-3'>
                        <div className='w-full flex flex-row gap-2'>
                          {/* –ê–≤–∞—Ç–∞—Ä –≤–æ–¥–∏—Ç–µ–ª—è */}
                          <div className='relative'>
                            <div className='flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-br from-emerald-500 to-emerald-600 text-lg font-bold text-white'>
                              {driverInfo.fullName
                                ? String(driverInfo.fullName).charAt(0).toUpperCase()
                                : '–í'}
                            </div>
                            <div className='absolute -bottom-0.5 -right-0.5 flex h-4 w-4 items-center justify-center rounded-full bg-emerald-500 text-white'>
                              <Shield className='h-2.5 w-2.5' />
                            </div>
                          </div>

                          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                          <div className='flex-1 space-y-2'>
                            <div className='flex items-start justify-between'>
                              <div>
                                <div className='flex items-center gap-1.5'>
                                  <User className='h-3.5 w-3.5 text-emerald-600' />
                                  <span className='text-xs font-medium text-emerald-700'>
                                    –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
                                  </span>
                                </div>
                                <h3 className='text-base font-semibold text-foreground'>
                                  {driverInfo.fullName || `–í–æ–¥–∏—Ç–µ–ª—å ${selectedDriver.id}`}
                                </h3>
                              </div>
                              <div className='inline-flex items-center gap-1 rounded-full bg-emerald-100 px-2 py-0.5 text-xs font-medium text-emerald-800'>
                                <UserCheck className='h-3 w-3' />
                                –ù–∞–∑–Ω–∞—á–µ–Ω
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ—Ç–∫–µ */}
                        <div className='grid grid-cols-2 gap-2 text-sm sm:grid-cols-4'>
                          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                          {driverInfo.phoneNumber && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Phone className='h-3.5 w-3.5 text-emerald-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–¢–µ–ª–µ—Ñ–æ–Ω</p>
                                <p className='truncate text-xs font-medium'>
                                  {String(driverInfo.phoneNumber)}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–∑ activeCar */}
                          {driverInfo.activeCar?.serviceClass && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Star className='h-3.5 w-3.5 text-amber-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–ö–ª–∞—Å—Å</p>
                                <p className='truncate text-xs font-medium'>
                                  {getServiceClassTranslation(String(driverInfo.activeCar.serviceClass))}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ activeCar */}
                          {driverInfo.activeCar?.type && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Car className='h-3.5 w-3.5 text-blue-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–¢–∏–ø</p>
                                <p className='truncate text-xs font-medium'>
                                  {getCarTypeTranslation(String(driverInfo.activeCar.type))}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –ì–æ—Å –Ω–æ–º–µ—Ä –∏–∑ activeCar */}
                          {driverInfo.activeCar?.licensePlate && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Hash className='h-3.5 w-3.5 text-slate-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–ù–æ–º–µ—Ä</p>
                                <p className='truncate font-mono text-xs font-medium'>
                                  {String(driverInfo.activeCar.licensePlate)}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ activeCar */}
                          {(driverInfo.activeCar?.make || driverInfo.activeCar?.model) && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Tag className='h-3.5 w-3.5 text-purple-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–ê–≤—Ç–æ</p>
                                <p className='truncate text-xs font-medium'>
                                  {[driverInfo.activeCar?.make, driverInfo.activeCar?.model]
                                    .filter(Boolean)
                                    .join(' ')}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ activeCar */}
                          {driverInfo.activeCar?.color && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Palette className='h-3.5 w-3.5 text-pink-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–¶–≤–µ—Ç</p>
                                <p className='truncate text-xs font-medium'>
                                  {String(driverInfo.activeCar.color)}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–∑ activeCar */}
                          {driverInfo.activeCar?.year && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <CalendarDays className='h-3.5 w-3.5 text-orange-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–ì–æ–¥</p>
                                <p className='truncate text-xs font-medium'>
                                  {String(driverInfo.activeCar.year)}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏–∑ activeCar */}
                          {driverInfo.activeCar?.passengerCapacity && (
                            <div className='flex items-center gap-2 rounded-md bg-muted/30 p-2'>
                              <Users className='h-3.5 w-3.5 text-indigo-600' />
                              <div className='min-w-0 flex-1'>
                                <p className='truncate text-xs text-muted-foreground'>–ú–µ—Å—Ç</p>
                                <p className='truncate text-xs font-medium'>
                                  {String(driverInfo.activeCar.passengerCapacity)}
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })()
              ) : !isInstantOrder ? (
                <div className='bg-gray-50 border border-gray-200 rounded-lg p-4'>
                  <div className='flex items-center gap-3'>
                    <div className='w-10 h-10 bg-gray-400 rounded-full flex items-center justify-center'>
                      <User className='h-5 w-5 text-white' />
                    </div>
                    <div className='flex-1'>
                      <p className='text-sm text-gray-600'>–í–æ–¥–∏—Ç–µ–ª—å</p>
                      <p className='font-medium text-gray-500'>–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω</p>
                      <p className='text-xs text-gray-400'>
                        –ù–∞–∑–Ω–∞—á—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                      </p>
                    </div>
                    <div className='text-right'>
                      <button
                        onClick={() => onTabChange && onTabChange('map')}
                        className='inline-flex items-center px-3 py-1.5 rounded-md text-xs font-medium bg-blue-600 text-white hover:bg-blue-700 transition-colors'
                      >
                        –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
                      </button>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </CardContent>
        </Card>

        {/* –°—Ç–æ–∏–º–æ—Å—Ç—å */}
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center gap-2'>
              <DollarSign className='h-5 w-5' />
              –°—Ç–æ–∏–º–æ—Å—Ç—å
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className='space-y-4'>
              {/* –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
              <div className='space-y-2'>
                <div className='flex justify-between'>
                  <span>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                  <span className='font-medium'>
                    {selectedTariff ? formatPrice(selectedTariff.basePrice || 0) : formatPrice(0)}
                  </span>
                </div>
                <div className='flex justify-between text-sm text-gray-600'>
                  <span>
                    –ó–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ({getRouteDistanceKm()} –∫–º √ó {selectedTariff?.perKmPrice || 0}{' '}
                    —Å–æ–º):
                  </span>
                  <span>
                    {formatPrice(getRouteDistanceKm() * (selectedTariff?.perKmPrice || 0))}
                  </span>
                </div>
                <div className='flex justify-between text-sm text-gray-600'>
                  <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</span>
                  <span>
                    {formatPrice(
                      selectedServices.reduce(
                        (total, service) => total + (service.price || 0) * (service.quantity || 1),
                        0,
                      ),
                    )}
                  </span>
                </div>
                <hr />
                <div className='flex justify-between font-medium text-lg'>
                  <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
                  <div className='flex flex-col items-end'>
                    {useCustomPrice &&
                    customPrice &&
                    parseFloat(customPrice) !== calculateTotalPrice() ? (
                      <>
                        {/* –ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ */}
                        <span className='text-gray-400 line-through text-sm'>
                          {formatPrice(calculateTotalPrice())}
                        </span>
                        {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–Ω–∞ */}
                        <span className='text-orange-600 font-bold'>
                          {formatPrice(parseFloat(customPrice) || 0)}
                        </span>
                      </>
                    ) : (
                      <span className='text-green-600'>{formatPrice(calculateTotalPrice())}</span>
                    )}
                  </div>
                </div>
              </div>

              {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–Ω–∞ */}
              <div className='p-4 border rounded-lg bg-gray-50'>
                <div className='flex items-center space-x-2'>
                  <Checkbox
                    id='custom-final-price'
                    checked={useCustomPrice}
                    onCheckedChange={checked => {
                      if (setUseCustomPrice) {
                        setUseCustomPrice(checked as boolean);
                      }
                    }}
                  />
                  <Label htmlFor='custom-final-price' className='font-medium'>
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
                  </Label>
                </div>
                {useCustomPrice && (
                  <div className='space-y-3'>
                    <div className='space-y-2'>
                      <Label htmlFor='custom-final-price-input'>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ (—Å–æ–º)</Label>
                      <Input
                        id='custom-final-price-input'
                        type='number'
                        placeholder='–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É'
                        value={customPrice}
                        onChange={e => {
                          if (setCustomPrice) {
                            setCustomPrice(e.target.value);
                          }
                        }}
                        className='max-w-xs'
                      />
                    </div>

                    {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞–∑–Ω–∏—Ü–µ –≤ —Ü–µ–Ω–µ */}
                    {customPrice && parseFloat(customPrice) !== calculateTotalPrice() && (
                      <div className='p-3 bg-yellow-50 border border-yellow-200 rounded-lg'>
                        <div className='flex items-start gap-2'>
                          <div className='w-5 h-5 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5'>
                            <span className='text-white text-xs font-bold'>!</span>
                          </div>
                          <div className='text-sm'>
                            <p className='font-medium text-yellow-800 mb-1'>
                              –í–Ω–∏–º–∞–Ω–∏–µ: —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
                            </p>
                            <p className='text-yellow-700'>
                              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:{' '}
                              <span className='font-medium'>
                                {formatPrice(calculateTotalPrice())}
                              </span>
                            </p>
                            <p className='text-yellow-700'>
                              –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:{' '}
                              <span className='font-medium'>
                                {formatPrice(parseFloat(customPrice) || 0)}
                              </span>
                            </p>
                            <p className='text-yellow-700 mt-1'>
                              –†–∞–∑–Ω–∏—Ü–∞:{' '}
                              <span
                                className={`font-medium ${
                                  parseFloat(customPrice) > calculateTotalPrice()
                                    ? 'text-green-600'
                                    : 'text-red-600'
                                }`}
                              >
                                {parseFloat(customPrice) > calculateTotalPrice() ? '+' : ''}
                                {formatPrice(
                                  (parseFloat(customPrice) || 0) - calculateTotalPrice(),
                                )}
                              </span>
                            </p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>


            </div>
          </CardContent>
        </Card>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–∫—Ä—ã—Ç–æ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ */}
      {!isInstantOrder && (
        <Card>
        <CardHeader>
          <CardTitle className='flex items-center gap-2'>
            <FileText className='h-5 w-5' />
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className='space-y-4'>
            {/* –ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ */}
            <div className='space-y-2'>
              <Label htmlFor='notes'>
                {methods.getValues('notes') ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏' : '–ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É'}
              </Label>
              <Textarea
                id='notes'
                placeholder='–î–æ–±–∞–≤—å—Ç–µ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è...'
                value={notes}
                onChange={e => {
                  setNotes(e.target.value);
                  if (methods) {
                    methods.setValue('notes', e.target.value);
                  }
                }}
                rows={4}
              />
            </div>
          </div>
        </CardContent>
      </Card>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ */}
      {showRouteWarningModal && (
        <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>
          <div className='bg-white rounded-lg p-6 max-w-md mx-4'>
            <div className='flex items-center gap-3 mb-4'>
              <AlertTriangle className='h-6 w-6 text-amber-500' />
              <h3 className='text-lg font-semibold'>–í–Ω–∏–º–∞–Ω–∏–µ: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ</h3>
            </div>

            <div className='mb-6 space-y-3'>
              <p className='text-gray-600'>
                –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Ä–æ—É—Ç–∏–Ω–≥–∞.
              </p>
              <p className='text-gray-600'>
                –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ –±–∞–∑–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É –±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
              </p>
              <p className='text-sm text-amber-600 bg-amber-50 p-3 rounded'>
                <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
              </p>
            </div>

            <div className='flex gap-3 justify-end'>
              <Button
                variant='outline'
                onClick={() => setShowRouteWarningModal(false)}
              >
                –ü–æ–Ω—è—Ç–Ω–æ
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
