'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { driverQueueApi } from '@shared/api/driver-queue';
import { orderService, type GetOrderDTO } from '@shared/api/orders';
import { ActiveOrderCard } from '@features/active-ride';
import { DriverStatusCard } from './components/driver-status-card';
import DriverStatusBlock from './components/driver-status-block';

export default function DriverDashboardPage() {
  const [currentOrder, setCurrentOrder] = useState<GetOrderDTO | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [_error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const fetchActiveOrder = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å orderId –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      const queueStatus = await driverQueueApi.getQueueStatus();

      let orderData: GetOrderDTO | null = null;

      if (queueStatus?.orderId) {
        orderData = await orderService.getOrderById(queueStatus.orderId);
      } else if (queueStatus && 'id' in queueStatus) {
        // –ï—Å–ª–∏ –≤ 404 –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        orderData = queueStatus as unknown as GetOrderDTO;
      }

      setCurrentOrder(orderData);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchActiveOrder();
  }, [fetchActiveOrder]);

  // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    const handleOrderAccepted = () => {
      console.log('üö® –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–ö–ê–ó–ê - –û–ë–ù–û–í–õ–Ø–Æ –î–ê–ù–ù–´–ï');
      fetchActiveOrder();
    };

    window.addEventListener('orderAccepted', handleOrderAccepted);

    return () => {
      window.removeEventListener('orderAccepted', handleOrderAccepted);
    };
  }, [fetchActiveOrder]);

  const hasActiveOrder = !!currentOrder;

  if (isLoading) {
    return (
      <div className='h-full flex flex-col p-4 space-y-4'>
        <div>
          <h1 className='text-2xl font-bold text-gray-900'>–ì–ª–∞–≤–Ω–∞—è</h1>
        </div>
        <div className='flex-1 flex items-center justify-center'>
          <div className='text-center'>
            <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto' />
            <p className='mt-2 text-gray-600'>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className='h-full flex flex-col p-4 space-y-4'>
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç: –ª–∏–±–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑, –ª–∏–±–æ —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è */}
      <div className='flex-1 min-h-0'>
        {currentOrder ? (
          <ActiveOrderCard
            order={currentOrder}
            onStatusUpdate={fetchActiveOrder}
          />
        ) : (
          <DriverStatusCard />
        )}
        <DriverStatusBlock />
      </div>
    </div>
  );
}
