// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (Open-Meteo - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–µ–∑ –∫–ª—é—á–µ–π)
const WEATHER_API_BASE = 'https://api.open-meteo.com/v1';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã
export interface WeatherData {
  location: string;
  country: string;
  temperature: number;
  feelsLike: number;
  description: string;
  icon: string;
  humidity: number;
  windSpeed: number;
  pressure: number;
  visibility: number;
  uvIndex?: number;
}

export interface ForecastItem {
  time: string;
  temperature: number;
  icon: string;
  description: string;
}

export interface WeatherForecast {
  current: WeatherData;
  hourly: ForecastItem[];
  daily: ForecastItem[];
}

// –ì–æ—Ä–æ–¥–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
export const KYRGYZSTAN_CITIES = [
  { name: '–ë–∏—à–∫–µ–∫', nameEn: 'Bishkek', lat: 42.8746, lon: 74.5698 },
  { name: '–û—à', nameEn: 'Osh', lat: 40.5283, lon: 72.7985 },
  { name: '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥', nameEn: 'Jalal-Abad', lat: 40.9339, lon: 73.0089 },
  { name: '–ö–∞—Ä–∞–∫–æ–ª', nameEn: 'Karakol', lat: 42.4906, lon: 78.3931 },
  { name: '–¢–æ–∫–º–æ–∫', nameEn: 'Tokmok', lat: 42.8421, lon: 75.3008 },
  { name: '–£–∑–≥–µ–Ω', nameEn: 'Uzgen', lat: 40.7697, lon: 73.3014 },
  { name: '–ë–∞–ª—ã–∫—á—ã', nameEn: 'Balykchy', lat: 42.4603, lon: 76.1869 },
  { name: '–¢–∞–ª–∞—Å', nameEn: 'Talas', lat: 42.5228, lon: 72.2428 },
  { name: '–ù–∞—Ä—ã–Ω', nameEn: 'Naryn', lat: 41.4286, lon: 75.9911 },
  { name: '–ö–µ—Ä–±–µ–Ω', nameEn: 'Kerben', lat: 40.5167, lon: 72.2167 },
] as const;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export async function getCurrentWeather(cityName: string): Promise<WeatherData> {
  try {
    const city = KYRGYZSTAN_CITIES.find(c => c.name === cityName || c.nameEn === cityName);

    if (!city) {
      throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const response = await fetch(
      `${WEATHER_API_BASE}/forecast?latitude=${city.lat}&longitude=${city.lon}&current=temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m,surface_pressure,visibility&timezone=Asia/Bishkek`
    );

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
    }

    const data = await response.json();
    const current = data.current;

    return {
      location: city.name,
      country: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
      temperature: Math.round(current.temperature_2m),
      feelsLike: Math.round(current.apparent_temperature),
      description: getWeatherDescription(current.weather_code),
      icon: getWeatherIcon(current.weather_code),
      humidity: current.relative_humidity_2m,
      windSpeed: Math.round(current.wind_speed_10m * 3.6), // –º/—Å –≤ –∫–º/—á
      pressure: Math.round(current.surface_pressure),
      visibility: Math.round(current.visibility / 1000), // –º–µ—Ç—Ä—ã –≤ –∫–º
    };
  } catch (error) {
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
export async function getWeatherForecast(cityName: string): Promise<WeatherForecast> {
  try {
    const city = KYRGYZSTAN_CITIES.find(c => c.name === cityName || c.nameEn === cityName);
    
    if (!city) {
      throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
    const currentWeather = await getCurrentWeather(cityName);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ (–ø–æ—á–∞—Å–æ–≤–æ–π –∏ –¥–Ω–µ–≤–Ω–æ–π)
    const forecastResponse = await fetch(
      `${WEATHER_API_BASE}/forecast?latitude=${city.lat}&longitude=${city.lon}&hourly=temperature_2m,weather_code&daily=temperature_2m_max,weather_code&timezone=Asia/Bishkek&forecast_days=5`
    );

    if (!forecastResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã');
    }

    const forecastData = await forecastResponse.json();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (—Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞)
    const hourly: ForecastItem[] = forecastData.hourly.time.slice(0, 24).map((time: string, index: number) => ({
      time: new Date(time).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      }),
      temperature: Math.round(forecastData.hourly.temperature_2m[index]),
      icon: getWeatherIcon(forecastData.hourly.weather_code[index]),
      description: getWeatherDescription(forecastData.hourly.weather_code[index]),
    }));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (—Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π)
    const daily: ForecastItem[] = forecastData.daily.time.map((time: string, index: number) => ({
      time: new Date(time).toLocaleDateString('ru-RU', {
        weekday: 'short',
        day: 'numeric',
        month: 'short'
      }),
      temperature: Math.round(forecastData.daily.temperature_2m_max[index]),
      icon: getWeatherIcon(forecastData.daily.weather_code[index]),
      description: getWeatherDescription(forecastData.daily.weather_code[index]),
    }));

    return {
      current: currentWeather,
      hourly: hourly.slice(0, 8), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 8 —á–∞—Å–æ–≤
      daily,
    };
  } catch (error) {
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É Open-Meteo
function getWeatherIcon(weatherCode: number): string {
  // –ö–æ–¥—ã –ø–æ–≥–æ–¥—ã Open-Meteo: https://open-meteo.com/en/docs
  if (weatherCode === 0) return 'clear'; // —è—Å–Ω–æ
  if (weatherCode <= 3) return 'partly-cloudy'; // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ/–æ–±–ª–∞—á–Ω–æ
  if (weatherCode <= 48) return 'fog'; // —Ç—É–º–∞–Ω
  if (weatherCode <= 67) return 'rain'; // –¥–æ–∂–¥—å
  if (weatherCode <= 77) return 'snow'; // —Å–Ω–µ–≥
  if (weatherCode <= 82) return 'rain'; // –ª–∏–≤–µ–Ω—å
  if (weatherCode <= 86) return 'snow'; // —Å–Ω–µ–≥–æ–ø–∞–¥
  if (weatherCode <= 99) return 'thunderstorm'; // –≥—Ä–æ–∑–∞

  return 'clear';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É Open-Meteo
function getWeatherDescription(weatherCode: number): string {
  const descriptions: Record<number, string> = {
    0: '—è—Å–Ω–æ',
    1: '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
    2: '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    3: '–ø–∞—Å–º—É—Ä–Ω–æ',
    45: '—Ç—É–º–∞–Ω',
    48: '–∏–∑–º–æ—Ä–æ–∑—å',
    51: '–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
    53: '—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å',
    55: '—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
    61: '–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
    63: '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
    65: '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
    71: '–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥',
    73: '—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
    75: '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
    80: '–ª–µ–≥–∫–∏–π –ª–∏–≤–µ–Ω—å',
    81: '—É–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å',
    82: '—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
    95: '–≥—Ä–æ–∑–∞',
    96: '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º',
    99: '—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º',
  };

  return descriptions[weatherCode] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É Open-Meteo
export function getWeatherEmoji(iconCode: string): string {
  const iconMap: Record<string, string> = {
    'clear': '‚òÄÔ∏è',
    'partly-cloudy': '‚õÖ',
    'cloudy': '‚òÅÔ∏è',
    'fog': 'üå´Ô∏è',
    'rain': 'üåßÔ∏è',
    'snow': '‚ùÑÔ∏è',
    'thunderstorm': '‚õàÔ∏è',
  };

  return iconMap[iconCode] || 'üå§Ô∏è';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–∏—à–∫–µ–∫)
export function getDefaultCity(): string {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ IP –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  return '–ë–∏—à–∫–µ–∫';
}
