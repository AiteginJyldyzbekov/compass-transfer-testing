// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º exchangerate-api.com - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
const CURRENCY_API_BASE = 'https://api.exchangerate-api.com/v4/latest';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
export interface CurrencyRate {
  code: string;
  name: string;
  rate: number;
  change?: number; // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –≤ %
  flag: string; // —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
}

export interface CurrencyData {
  baseCurrency: string;
  lastUpdated: string;
  rates: CurrencyRate[];
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const MAIN_CURRENCIES = [
  { code: 'USD', name: '–î–æ–ª–ª–∞—Ä –°–®–ê', flag: 'üá∫üá∏' },
  { code: 'EUR', name: '–ï–≤—Ä–æ', flag: 'üá™üá∫' },
  { code: 'RUB', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', flag: 'üá∑üá∫' },
  { code: 'KZT', name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ', flag: 'üá∞üáø' },
  { code: 'UZS', name: '–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º', flag: 'üá∫üáø' },
  { code: 'CNY', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', flag: 'üá®üá≥' },
] as const;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–æ–º–∞
export async function getCurrencyRates(): Promise<CurrencyData> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ KGS (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π —Å–æ–º)
    const response = await fetch(`${CURRENCY_API_BASE}/KGS`);

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç');
    }

    const data = await response.json();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –≤–∞–ª—é—Ç
    const rates: CurrencyRate[] = MAIN_CURRENCIES.map(currency => {
      const rate = data.rates[currency.code];
      
      return {
        code: currency.code,
        name: currency.name,
        rate: rate ? parseFloat((1 / rate).toFixed(4)) : 0, // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å (—Å–∫–æ–ª—å–∫–æ —Å–æ–º–æ–≤ –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã)
        flag: currency.flag,
      };
    }).filter(rate => rate.rate > 0); // –£–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—ã –±–µ–∑ –∫—É—Ä—Å–∞

    return {
      baseCurrency: 'KGS',
      lastUpdated: new Date().toLocaleString('ru-RU'),
      rates,
    };
  } catch (error) {
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
export async function getCurrencyRatesWithHistory(): Promise<CurrencyData> {
  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  return getCurrencyRates();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
export function formatCurrencyRate(rate: number): string {
  if (rate >= 1000) {
    return rate.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  }

  return rate.toLocaleString('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
export function getChangeColor(change?: number): string {
  if (!change) return 'text-gray-500';
  if (change > 0) return 'text-green-500';
  if (change < 0) return 'text-red-500';
  
  return 'text-gray-500';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
export function getChangeIcon(change?: number): string {
  if (!change) return '';
  if (change > 0) return '‚ÜóÔ∏è';
  if (change < 0) return '‚ÜòÔ∏è';
  
  return '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
export function getChangeText(change?: number): string {
  if (!change) return '';
  
  const absChange = Math.abs(change);
  const sign = change > 0 ? '+' : '';
  
  return `${sign}${absChange.toFixed(2)}%`;
}
