'use client';

import React from 'react';
import { Marker, Popup } from 'react-leaflet';
import { LocationType } from '@entities/locations/enums';
import type { GetLocationDTO } from '@entities/locations/interface';
import { createDriverIcon, createPinIcon, getColorByType } from '../icons';
import type { RoutePoint } from '../types';

interface RouteMarkerProps {
  point: RoutePoint;
  index: number;
  routePoints: RoutePoint[];
  onLocationToggle?: (location: GetLocationDTO, isSelected: boolean) => void;
  uiScale?: number;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
 */
export const RouteMarker: React.FC<RouteMarkerProps> = ({
  point,
  index,
  routePoints,
  onLocationToggle,
  uiScale = 1,
}) => {
  // –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∞—à–∏–Ω–∫–∏
  if (point.type === 'driver') {
    const heading = 'heading' in point ? (point.heading as number) : 0;

    return (
      <Marker
        key={`driver-${index}`}
        position={[point.latitude, point.longitude]}
        icon={createDriverIcon('Economy', false, heading, uiScale)}
      >
        <Popup>
          <div style={{ minWidth: '12.5rem' }}>
            <div style={{ marginBottom: '0.5rem', fontWeight: 600 }}>
              üöó –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            </div>
            <div style={{ fontSize: '0.75rem', marginBottom: '0.5rem' }}>
              <div>
                <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {point.latitude.toFixed(6)},{' '}
                {point.longitude.toFixed(6)}
              </div>
              {heading > 0 && (
                <div>
                  <strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> {heading.toFixed(0)}¬∞
                </div>
              )}
            </div>
          </div>
        </Popup>
      </Marker>
    );
  }

  // –î–ª—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã A, B, C...
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–æ—á–∫–∏
  let label: string;

  if (point.type === 'start') {
    label = 'A';
  } else if (point.type === 'end') {
    label = 'B';
  } else {
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ (waypoint, intermediate, etc.) —Å—á–∏—Ç–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const routePointsBeforeIndex = routePoints
      .slice(0, index)
      .filter(p => p.type !== 'driver').length;

    label = String.fromCharCode(65 + routePointsBeforeIndex); // A, B, C ...
  }

  const colorFill = getColorByType(point.type);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ ID (–∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ª–æ–∫–∞—Ü–∏—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  const hasLocationId = 'id' in point && point.id;

  return (
    <Marker
      key={index}
      position={[point.latitude, point.longitude]}
      icon={createPinIcon(colorFill, label, uiScale)}
    >
      <Popup>
        <div style={{ minWidth: '12.5rem' }}>
          <div style={{ marginBottom: '0.5rem', fontWeight: 600 }}>
            {point.name || `–¢–æ—á–∫–∞ ${index + 1}`}
          </div>
          <div style={{ fontSize: '0.75rem', marginBottom: '0.5rem' }}>
            <div>
              <strong>–¢–∏–ø:</strong> {point.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </div>
            <div>
              <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {point.latitude.toFixed(6)},{' '}
              {point.longitude.toFixed(6)}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ —Å ID –ª–æ–∫–∞—Ü–∏–∏ */}
          {hasLocationId && onLocationToggle && (
            <button
              type='button'
              onClick={() => {
                // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç GetLocationDTO –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                const locationToRemove: GetLocationDTO = {
                  id: point.id!,
                  name: point.name || '–¢–æ—á–∫–∞',
                  latitude: point.latitude,
                  longitude: point.longitude,
                  address: point.name || '–¢–æ—á–∫–∞',
                  city: '',
                  country: '',
                  region: '',
                  type: LocationType.Other,
                  isActive: true,
                };

                onLocationToggle(locationToRemove, false); // false = —É–±—Ä–∞—Ç—å
              }}
              style={{
                width: '100%',
                padding: '0.375rem 0.75rem',
                backgroundColor: '#ef4444',
                color: 'white',
                border: 'none',
                borderRadius: '0.375rem',
                fontSize: '0.75rem',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'background-color 0.2s',
              }}
              onMouseOver={e => {
                e.currentTarget.style.backgroundColor = '#dc2626';
              }}
              onMouseOut={e => {
                e.currentTarget.style.backgroundColor = '#ef4444';
              }}
            >
              ‚ùå –£–±—Ä–∞—Ç—å —Ç–æ—á–∫—É
            </button>
          )}
        </div>
      </Popup>
    </Marker>
  );
};
