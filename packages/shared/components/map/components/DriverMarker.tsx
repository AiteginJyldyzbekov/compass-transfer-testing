'use client';

import { ExternalLink } from 'lucide-react';
import Image from 'next/image';
import React, { useRef, useCallback, useLayoutEffect, useState } from 'react';
import { Marker, Popup } from 'react-leaflet';
import { CarTypeValues, type CarType } from '@entities/tariffs/enums/CarType.enum';
import { ServiceClassValues, type ServiceClass } from '@entities/tariffs/enums/ServiceClass.enum';
import { createDriverIcon } from '../icons';
import type { ActiveDriverDTO } from '../types';

interface DriverMarkerProps {
  driver: ActiveDriverDTO;
  isSelected?: boolean;
  heading?: number;
  onDriverSelect?: (driver: ActiveDriverDTO | string) => void;
  getDriverById?: (id: string) => Record<string, unknown> | null;
  loadDriverData?: (id: string) => Promise<void>;
  uiScale?: number;
  forceOpenPopup?: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å popup
 */
export const DriverMarker: React.FC<DriverMarkerProps> = ({
  driver,
  isSelected = false,
  heading = 0,
  onDriverSelect,
  getDriverById,
  loadDriverData,
  uiScale = 1,
  forceOpenPopup = false,
}) => {
  const fullDriverData = getDriverById?.(driver.id);
  const popupRef = useRef<L.Popup>(null);
  const [isLoadingData, setIsLoadingData] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
  const handleMarkerClick = useCallback(async () => {
    if (loadDriverData && !fullDriverData) {
      console.log('üñ±Ô∏è –ö–õ–ò–ö –ü–û –ú–ê–†–ö–ï–†–£ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:', driver.id);
      setIsLoadingData(true);
      try {
        await loadDriverData(driver.id);
      } finally {
        setIsLoadingData(false);
      }
    }
  }, [loadDriverData, driver.id, fullDriverData]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –µ—Å–ª–∏ forceOpenPopup = true –ò –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  useLayoutEffect(() => {
    if (forceOpenPopup) {
      console.log('üìç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:', driver.id, {
        hasPopupRef: !!popupRef.current,
        hasLoadDriverData: !!loadDriverData,
        hasFullDriverData: !!fullDriverData
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (loadDriverData && !fullDriverData) {
        console.log('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–¢–ö–†–´–¢–ò–ï - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:', driver.id);
        setIsLoadingData(true);
        loadDriverData(driver.id).finally(() => {
          setIsLoadingData(false);
        });
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º popup —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –º–∞—Ä–∫–µ—Ä —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
      const timer = setTimeout(() => {
        if (popupRef.current) {
          console.log('‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º popup —á–µ—Ä–µ–∑ popupRef');
          popupRef.current.openPopup();
        } else {
          console.error('‚ùå popupRef.current –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
      }, 100);

      return () => clearTimeout(timer);
    }
  }, [forceOpenPopup, driver.id, loadDriverData, fullDriverData]);

  return (
    <Marker
      key={`driver-${driver.id}`}
      position={[driver.currentLocation.latitude, driver.currentLocation.longitude]}
      icon={createDriverIcon(driver.serviceClass, isSelected, heading, uiScale)}
      eventHandlers={{
        click: handleMarkerClick
      }}
      // –î–æ–±–∞–≤–ª—è–µ–º driverId –≤ –æ–ø—Ü–∏–∏ –¥–ª—è MapController
      // @ts-ignore
      driverId={driver.id}
    >
      <Popup
        ref={popupRef}
      >
        <div style={{
          fontFamily: 'system-ui, -apple-system, sans-serif',
          backgroundColor: 'white',
          borderRadius: '0.5rem',
        }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            marginBottom: '1rem',
            paddingBottom: '0.75rem',
            borderBottom: '1px solid #e5e7eb'
          }}>
            <h3 style={{
              fontSize: '1rem',
              fontWeight: '600',
              color: '#111827',
              margin: 0
            }}>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ
            </h3>
            <button
              onClick={() => {
                const profileUrl = `http://compass.local:3009/users/driver/${driver.id}`;

                window.open(profileUrl, '_blank');
              }}
              style={{
                padding: '0.25rem',
                borderRadius: '50%',
                border: 'none',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'background-color 0.2s'
              }}
              onMouseOver={e => {
                e.currentTarget.style.backgroundColor = '#f3f4f6';
              }}
              onMouseOut={e => {
                e.currentTarget.style.backgroundColor = 'transparent';
              }}
              title="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
            >
              <ExternalLink style={{ width: '1rem', height: '1rem', color: '#6b7280' }} />
            </button>
            {isSelected && (
              <span style={{
                fontSize: '0.75rem',
                backgroundColor: '#10b981',
                color: 'white',
                padding: '0.25rem 0.5rem',
                borderRadius: '0.375rem',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center',
                gap: '0.25rem'
              }}>
                ‚úì –í—ã–±—Ä–∞–Ω
              </span>
            )}
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {isLoadingData ? (
            // –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              padding: '2rem',
              minHeight: '150px'
            }}>
              <div style={{
                width: '40px',
                height: '40px',
                border: '4px solid #f3f4f6',
                borderTop: '4px solid #3b82f6',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                marginBottom: '1rem'
              }}></div>
              <p style={{
                color: '#6b7280',
                fontSize: '0.875rem',
                margin: 0,
                textAlign: 'center'
              }}>
                –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è...
              </p>
              <style>{`
                @keyframes spin {
                  0% { transform: rotate(0deg); }
                  100% { transform: rotate(360deg); }
                }
              `}</style>
            </div>
          ) : (
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            <div>
              {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ */}
              <div style={{
                display: 'grid',
                gridTemplateColumns: '1fr 1fr',
                gap: '0.5rem'
              }}>
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –í–æ–¥–∏—Ç–µ–ª—å */}
            <div>
              <div style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                marginBottom: '0.75rem'
              }}>
                {/* –ê–≤–∞—Ç–∞—Ä */}
                <div style={{
                  width: '3rem',
                  height: '3rem',
                  borderRadius: '50%',
                  backgroundColor: '#f3f4f6',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  marginBottom: '0.5rem',
                  fontSize: '1.5rem'
                }}>
                  üë§
                </div>

                {/* –ò–º—è */}
                <h4 style={{
                  fontSize: '0.875rem',
                  fontWeight: '600',
                  color: '#111827',
                  margin: 0,
                  textAlign: 'center'
                }}>
                  {(fullDriverData?.fullName as string) || '–í–æ–¥–∏—Ç–µ–ª—å'}
                </h4>
              </div>

              {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  marginBottom: '0.5rem'
                }}>
                  <span>üìû</span>
                  <span>{(fullDriverData?.phoneNumber as string) || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  marginBottom: '0.5rem'
                }}>
                  <span>‚úâÔ∏è</span>
                  <span>{(fullDriverData?.email as string) || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <span>{fullDriverData?.online ? 'üü¢' : 'üî¥'}</span>
                  <span>{fullDriverData?.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}</span>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ê–≤—Ç–æ–º–æ–±–∏–ª—å */}
            <div>
              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è */}
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                marginBottom: '1rem'
              }}>
                <Image
                  src="/auto/eqm5_black.png"
                  alt="–ê–≤—Ç–æ–º–æ–±–∏–ª—å"
                  width={100}
                  height={60}
                  style={{
                    objectFit: 'contain',
                    borderRadius: '0.5rem',
                    backgroundColor: '#f9fafb',
                    padding: '0.5rem'
                  }}
                />
              </div>

              <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                <div style={{ marginBottom: '0.5rem' }}>
                  <div style={{ fontWeight: '500', color: '#374151' }}>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:</div>
                  <div>
                    {String((fullDriverData?.activeCar as Record<string, unknown>)?.make || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}{' '}
                    {String((fullDriverData?.activeCar as Record<string, unknown>)?.model || CarTypeValues[driver.type as unknown as CarType] || driver.type)}
                  </div>
                </div>

                <div style={{ marginBottom: '0.5rem' }}>
                  <div style={{ fontWeight: '500', color: '#374151' }}>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</div>
                  <div>{CarTypeValues[driver.type as unknown as CarType] || driver.type}</div>
                </div>

                <div style={{ marginBottom: '0.5rem' }}>
                  <div style={{ fontWeight: '500', color: '#374151' }}>–ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</div>
                  <div style={{
                    display: 'inline-block',
                    backgroundColor: '#dbeafe',
                    color: '#1e40af',
                    padding: '0.125rem 0.375rem',
                    borderRadius: '0.25rem',
                    fontSize: '0.6875rem',
                    fontWeight: '500'
                  }}>
                    {ServiceClassValues[driver.serviceClass as unknown as ServiceClass] || driver.serviceClass}
                  </div>
                </div>

                <div style={{ marginBottom: '0.5rem' }}>
                  <div style={{ fontWeight: '500', color: '#374151' }}>–ù–æ–º–µ—Ä:</div>
                  <div>{String((fullDriverData?.activeCar as Record<string, unknown>)?.licensePlate || '–ù–µ —É–∫–∞–∑–∞–Ω')}</div>
                </div>

                <div>
                  <div style={{ fontWeight: '500', color: '#374151' }}>–¶–≤–µ—Ç:</div>
                  <div>{String((fullDriverData?.activeCar as Record<string, unknown>)?.color || '–ù–µ —É–∫–∞–∑–∞–Ω')}</div>
                </div>
              </div>
            </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          {onDriverSelect && (
            <div style={{
              marginTop: '1rem',
              paddingTop: '1rem',
              borderTop: '1px solid #e5e7eb',
              display: 'flex',
              gap: '0.5rem'
            }}>
              {isSelected ? (
                <button
                  type='button'
                  onClick={() => {
                    onDriverSelect('');
                  }}
                  style={{
                    flex: 1,
                    padding: '0.5rem 1rem',
                    backgroundColor: '#ef4444',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.5rem',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',
                  }}
                  onMouseOver={e => {
                    e.currentTarget.style.backgroundColor = '#dc2626';
                  }}
                  onMouseOut={e => {
                    e.currentTarget.style.backgroundColor = '#ef4444';
                  }}
                >
                  ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
                </button>
              ) : (
                <button
                  type='button'
                  onClick={() => {
                    onDriverSelect(driver);
                  }}
                  style={{
                    flex: 1,
                    padding: '0.5rem 1rem',
                    backgroundColor: '#10b981',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.5rem',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',
                  }}
                  onMouseOver={e => {
                    e.currentTarget.style.backgroundColor = '#16a34a';
                  }}
                  onMouseOut={e => {
                    e.currentTarget.style.backgroundColor = '#22c55e';
                  }}
                >
                  ‚úÖ –í—ã–±—Ä–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
                </button>
              )}
            </div>
          )}
            </div>
          )}
        </div>
      </Popup>
    </Marker>
  );
};
