/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */

import { RouteType, type RouteTypeInfo, type RouteResult } from '../types';

export interface RoutePoint {
  latitude: number;
  longitude: number;
}

interface OSRMRoute {
  distance: number;
  duration: number;
  geometry: {
    coordinates: [number, number][];
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export const ROUTE_TYPE_CONFIG: Record<RouteType, RouteTypeInfo> = {
  [RouteType.FASTEST]: {
    type: RouteType.FASTEST,
    name: '–ë—ã—Å—Ç—Ä—ã–π',
    description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏',
    icon: '‚ö°',
    color: '#3b82f6', // blue
  },
  [RouteType.SHORTEST]: {
    type: RouteType.SHORTEST,
    name: '–ö–æ—Ä–æ—Ç–∫–∏–π',
    description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ',
    icon: 'üìè',
    color: '#10b981', // green
  },
  [RouteType.BALANCED]: {
    type: RouteType.BALANCED,
    name: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π',
    description: '–õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è',
    icon: '‚öñÔ∏è',
    color: '#f59e0b', // amber
  },
  [RouteType.ECO]: {
    type: RouteType.ECO,
    name: '–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π',
    description: '–≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞, —Ç–∏—Ö–∏–µ –¥–æ—Ä–æ–≥–∏',
    icon: 'üå±',
    color: '#059669', // emerald
  },
};

export interface RoutingProvider {
  name: string;
  buildRoute: (points: RoutePoint[], routeType?: RouteType) => Promise<RouteResult>;
}

/**
 * OSRM –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, —ç–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
class OSRMProvider implements RoutingProvider {
  name = 'OSRM';

  async buildRoute(
    points: RoutePoint[],
    routeType: RouteType = RouteType.FASTEST,
  ): Promise<RouteResult> {
    const waypoints = points.map(point => `${point.longitude},${point.latitude}`).join(';');

    const servers = [
      'https://router.project-osrm.org',
      'https://routing.openstreetmap.de/routed-car',
    ];

    for (const server of servers) {
      try {
        const url = server.includes('routed-car')
          ? `${server}/route/v1/driving/${waypoints}?overview=full&geometries=geojson&alternatives=false&steps=false`
          : `${server}/route/v1/driving/${waypoints}?overview=full&geometries=geojson&alternatives=false&steps=false&continue_straight=default`;

        const response = await fetch(url, {
          headers: { 'User-Agent': 'CompassTransfer/1.0' },
        });

        if (!response.ok) continue;

        const data = await response.json();

        if (data.routes && data.routes[0]) {
          const route = data.routes[0];

          return {
            type: routeType,
            coordinates: route.geometry.coordinates.map((coord: [number, number]) => [
              coord[1],
              coord[0],
            ]),
            distance: Math.round(route.distance || 0),
            duration: Math.round(route.duration || 0),
            info: ROUTE_TYPE_CONFIG[routeType],
          };
        }
      } catch {
        continue;
      }
    }

    throw new Error('–í—Å–µ OSRM —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ—É—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
export class RoutingService {
  private providers: RoutingProvider[] = [
    new OSRMProvider(), // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π
  ];

  /**
   * –°—Ç—Ä–æ–∏—Ç –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  async buildRoute(
    points: RoutePoint[],
    routeType: RouteType = RouteType.FASTEST,
  ): Promise<RouteResult> {
    if (points.length < 2) {
      throw new Error('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
    }

    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for (const provider of this.providers) {
      try {
        const route = await provider.buildRoute(points, routeType);

        return route;
      } catch {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        continue;
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–£–Æ –õ–ò–ù–ò–Æ!
    throw new Error('‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ä–æ—É—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ –¥–æ—Ä–æ–≥–∞–º');
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –æ—Ç OSRM
   */
  async buildAllRoutes(points: RoutePoint[]): Promise<RouteResult[]> {
    if (points.length < 2) {
      throw new Error('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç OSRM
    const realRoutes = await this.getRealAlternativeRoutes(points);

    if (realRoutes.length === 0) {
      // –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–£–Æ –õ–ò–ù–ò–Æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      throw new Error('‚ùå API —Ä–æ—É—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã —Ä–µ–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    return this.assignRouteTypes(realRoutes);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç OSRM API
   */
  private async getRealAlternativeRoutes(points: RoutePoint[]): Promise<OSRMRoute[]> {
    const waypoints = points.map(point => `${point.longitude},${point.latitude}`).join(';');

    const servers = [
      'https://router.project-osrm.org',
      'https://routing.openstreetmap.de/routed-car',
    ];

    for (const server of servers) {
      try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        const url = server.includes('routed-car')
          ? `${server}/route/v1/driving/${waypoints}?overview=full&geometries=geojson&alternatives=true&steps=false&number_of_alternatives=3`
          : `${server}/route/v1/driving/${waypoints}?overview=full&geometries=geojson&alternatives=true&steps=false&continue_straight=default`;

        const response = await fetch(url, {
          headers: { 'User-Agent': 'CompassTransfer/1.0' },
        });

        if (!response.ok) continue;

        const data = await response.json();

        if (data.routes && data.routes.length > 0) {
          return data.routes;
        }
      } catch {
        continue;
      }
    }

    return [];
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω—ã–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º
   */
  private assignRouteTypes(routes: OSRMRoute[]): RouteResult[] {
    const results: RouteResult[] = [];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const sortedByTime = [...routes].sort((a, b) => a.duration - b.duration);
    const sortedByDistance = [...routes].sort((a, b) => a.distance - b.distance);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã
    if (sortedByTime[0]) {
      results.push(this.createRouteResult(sortedByTime[0], RouteType.FASTEST));
    }

    if (sortedByDistance[0] && sortedByDistance[0] !== sortedByTime[0]) {
      results.push(this.createRouteResult(sortedByDistance[0], RouteType.SHORTEST));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes.forEach((route, index) => {
      if (index < 2) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ

      const routeType = index === 2 ? RouteType.BALANCED : RouteType.ECO;

      if (results.length < 4) {
        results.push(this.createRouteResult(route, routeType));
      }
    });

    // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–∞–ª–æ, –¥—É–±–ª–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    if (results.length === 1 && routes[0]) {
      const baseRoute = routes[0];

      results.push(this.createRouteResult(baseRoute, RouteType.SHORTEST));
      results.push(this.createRouteResult(baseRoute, RouteType.BALANCED));
      results.push(this.createRouteResult(baseRoute, RouteType.ECO));
    }

    return results;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç RouteResult –∏–∑ OSRM –º–∞—Ä—à—Ä—É—Ç–∞
   */
  private createRouteResult(route: OSRMRoute, routeType: RouteType): RouteResult {
    return {
      type: routeType,
      coordinates: route.geometry.coordinates.map((coord: [number, number]) => [
        coord[1],
        coord[0],
      ]),
      distance: Math.round(route.distance || 0),
      duration: Math.round(route.duration || 0),
      info: ROUTE_TYPE_CONFIG[routeType],
    };
  }

  // –£–¥–∞–ª–∏–ª–∏ createFallbackRoutes - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
   */
  private calculateStraightLineDistance(points: RoutePoint[]): number {
    let totalDistance = 0;

    for (let i = 0; i < points.length - 1; i++) {
      const point1 = points[i];
      const point2 = points[i + 1];

      // –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
      const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
      const dLat = ((point2.latitude - point1.latitude) * Math.PI) / 180;
      const dLon = ((point2.longitude - point1.longitude) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos((point1.latitude * Math.PI) / 180) *
          Math.cos((point2.latitude * Math.PI) / 180) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

      totalDistance += R * c;
    }

    return totalDistance;
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞
   */
  async isRoutingAvailable(): Promise<boolean> {
    try {
      // –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –ë–∏—à–∫–µ–∫
      const testPoints: RoutePoint[] = [
        { latitude: 42.8746, longitude: 74.5698 },
        { latitude: 42.8656, longitude: 74.5806 },
      ];

      await this.buildRoute(testPoints);

      return true;
    } catch {
      return false;
    }
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const routingService = new RoutingService();
