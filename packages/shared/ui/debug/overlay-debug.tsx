'use client';

import { useEffect, useState } from 'react';

export function OverlayDebug() {
  const [overlays, setOverlays] = useState<Element[]>([]);

  useEffect(() => {
    const checkOverlays = () => {
      // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å fixed –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ–∫–∏–º z-index
      const fixedElements = Array.from(document.querySelectorAll('*')).filter(el => {
        const style = window.getComputedStyle(el);

        return style.position === 'fixed' && 
               (style.zIndex === '50' || style.zIndex === '100' || parseInt(style.zIndex) > 50);
      });
      
      setOverlays(fixedElements);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkOverlays, 2000);
    
    checkOverlays(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    return () => clearInterval(interval);
  }, []);

  if (overlays.length === 0) return null;

  return (
    <div 
      style={{
        position: 'fixed',
        top: 10,
        right: 10,
        background: 'red',
        color: 'white',
        padding: '10px',
        borderRadius: '5px',
        zIndex: 9999,
        fontSize: '12px',
        maxWidth: '300px'
      }}
    >
      <div>üö® –ù–∞–π–¥–µ–Ω—ã overlay —ç–ª–µ–º–µ–Ω—Ç—ã:</div>
      {overlays.map((el, i) => (
        <div key={i}>
          {el.tagName} - z-index: {window.getComputedStyle(el).zIndex}
          <button 
            onClick={() => el.remove()}
            style={{ marginLeft: '5px', background: 'white', color: 'red' }}
          >
            –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      ))}
    </div>
  );
}
