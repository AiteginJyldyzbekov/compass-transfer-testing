'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useOrderStack } from '../hooks/useOrderStack';
import { driverOrderApi } from '@shared/api/orders';
import { toast } from '@shared/lib/conditional-toast';
import { ClockIcon, ProfileIcon } from '@shared/icons';

export function OrderStackList() {
  const { orderStack, removeFromStack } = useOrderStack();
  const [acceptingOrderId, setAcceptingOrderId] = useState<string | null>(null);
  const [currentTime, setCurrentTime] = useState(Date.now());
  const router = useRouter();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(Date.now());
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const handleAcceptOrder = async (orderId: string) => {
    try {
      setAcceptingOrderId(orderId);
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
      await driverOrderApi.acceptInstantOrder(orderId);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
      removeFromStack(orderId);
      
      toast.success('‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
      router.push('/');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞');
    } finally {
      setAcceptingOrderId(null);
    }
  };


  const formatTimeRemaining = (expiresAt: number) => {
    const remaining = expiresAt - currentTime;
    
    if (remaining <= 0) return '–ò—Å—Ç–µ–∫';
    
    const minutes = Math.floor(remaining / 60000);
    const seconds = Math.floor((remaining % 60000) / 1000);
    
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  if (orderStack.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-gray-500 text-lg mb-2">üì¶</div>
        <p className="text-gray-600 text-sm">
          –°—Ç–∞–∫–∞–Ω –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç
        </p>
        <p className="text-gray-400 text-xs mt-1">
          –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {orderStack.map((item) => {
        const { order } = item;
        const isAccepting = acceptingOrderId === order.id;
        const timeRemaining = formatTimeRemaining(item.expiresAt);
        const isExpired = timeRemaining === '–ò—Å—Ç–µ–∫';

        return (
          <div
            key={order.id}
            className={`bg-white rounded-lg border p-4 ${
              isExpired ? 'opacity-50 border-gray-200' : 'border-blue-200 shadow-sm'
            }`}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º */}
            <div className="flex justify-between items-start mb-3">
              <div className="flex items-center gap-2">
                <ClockIcon size={16} className="text-gray-500" />
                <span className="text-sm font-medium text-gray-700">
                  –ó–∞–∫–∞–∑ #{order.id.slice(-6)}
                </span>
              </div>
              <div className={`text-xs px-2 py-1 rounded-full ${
                isExpired 
                  ? 'bg-gray-100 text-gray-500' 
                  : 'bg-orange-100 text-orange-600'
              }`}>
                {timeRemaining}
              </div>
            </div>

            {/* –ú–∞—Ä—à—Ä—É—Ç */}
            <div className="space-y-2 mb-4">
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-gray-600 truncate">
                    {order.pickupLocation?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                  </p>
                </div>
              </div>
              
              {order.dropoffLocation && (
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0" />
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-gray-600 truncate">
                      {order.dropoffLocation.address}
                    </p>
                  </div>
                </div>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ */}
            {order.passenger && (
              <div className="flex items-center gap-2 mb-4 text-sm text-gray-600">
                <ProfileIcon size={16} />
                <span>{order.passenger.fullName}</span>
                {order.passenger.phoneNumber && (
                  <>
                    <span className="text-xs">üìû</span>
                    <span>{order.passenger.phoneNumber}</span>
                  </>
                )}
              </div>
            )}

            {/* –°—Ç–æ–∏–º–æ—Å—Ç—å */}
            <div className="flex justify-between items-center mb-4">
              <span className="text-sm text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
              <span className="text-lg font-bold text-blue-600">
                {order.totalPrice} KGS
              </span>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ */}
            {!isExpired && (
              <div className="flex gap-2">
                <button
                  onClick={() => handleAcceptOrder(order.id)}
                  disabled={isAccepting}
                  className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg text-sm font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isAccepting ? '–ü—Ä–∏–Ω–∏–º–∞–µ–º...' : '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑'}
                </button>
              </div>
            )}

            {isExpired && (
              <div className="text-center py-2">
                <span className="text-sm text-gray-500">
                  –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
                </span>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}
