'use client';

import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { notificationsApi, type GetNotificationDTO } from '@shared/api/notifications';
import { useSignalR } from '@shared/hooks/signal/useSignalR';
import { logger } from '@shared/lib';

interface NotificationsContextType {
  unreadCount: number;
  notifications: GetNotificationDTO[];
  isLoading: boolean;
  refreshUnreadCount: () => Promise<void>;
  markAsRead: (notificationIds: string[]) => Promise<void>;
}

const NotificationsContext = createContext<NotificationsContextType | undefined>(undefined);

interface NotificationsProviderProps {
  children: React.ReactNode;
}

export function NotificationsProvider({ children }: NotificationsProviderProps) {
  const [unreadCount, setUnreadCount] = useState(0);
  const [notifications, setNotifications] = useState<GetNotificationDTO[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { on, off } = useSignalR();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const refreshUnreadCount = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
      const result = await notificationsApi.getMyNotifications({
        size: 50, // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
      });

      const allNotifications = result.data || [];
      const unreadNotifications = allNotifications.filter(n => !n.isRead);
      
      setNotifications(allNotifications);
      setUnreadCount(unreadNotifications.length);
      
      logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', unreadNotifications.length);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      setUnreadCount(0);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const markAsRead = useCallback(async (notificationIds: string[]) => {
    try {
      await notificationsApi.markAsRead(notificationIds);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNotifications(prev => 
        prev.map(notification => 
          notificationIds.includes(notification.id)
            ? { ...notification, isRead: true }
            : notification
        )
      );
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
      setNotifications(prev => {
        const newUnreadCount = prev.filter(n => !n.isRead).length;

        setUnreadCount(newUnreadCount);

        return prev;
      });
      
      logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', notificationIds);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }, []);

  // SignalR —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const handleNotificationUpdate = () => {
      logger.info('üì® –ü–æ–ª—É—á–µ–Ω–æ SignalR —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      refreshUnreadCount();
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    on('NotificationUpdate', handleNotificationUpdate);
    on('NewNotification', handleNotificationUpdate);

    return () => {
      off('NotificationUpdate', handleNotificationUpdate);
      off('NewNotification', handleNotificationUpdate);
    };
  }, [on, off, refreshUnreadCount]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    refreshUnreadCount();
    // –£–±–∏—Ä–∞–µ–º polling - –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ SignalR
  }, [refreshUnreadCount]);

  const contextValue: NotificationsContextType = {
    unreadCount,
    notifications,
    isLoading,
    refreshUnreadCount,
    markAsRead,
  };

  return (
    <NotificationsContext.Provider value={contextValue}>
      {children}
    </NotificationsContext.Provider>
  );
}

export function useNotificationsContext(): NotificationsContextType {
  const context = useContext(NotificationsContext);

  if (context === undefined) {
    throw new Error('useNotificationsContext must be used within a NotificationsProvider');
  }
  
  return context;
}
