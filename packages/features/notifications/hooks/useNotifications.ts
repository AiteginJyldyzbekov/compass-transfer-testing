'use client'

import { useState, useCallback, useRef } from 'react';
import { notificationsApi, type GetNotificationDTO, type NotificationApiResponse } from '@shared/api/notifications';
import { logger } from '@shared/lib/logger';

export interface UseNotificationsResult {
  notifications: GetNotificationDTO[];
  isLoading: boolean;
  isLoadingMore: boolean;
  error: string | null;
  hasMore: boolean;
  totalCount: number;
  unreadCount: number;
  actions: {
    loadNotifications: (append?: boolean) => Promise<void>;
    loadMore: () => Promise<void>;
    refresh: () => Promise<void>;
    markAsRead: (id: string) => Promise<void>;
    deleteNotification: (id: string) => Promise<void>;
  };
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç notification-service –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 */
export function useNotifications(pageSize: number = 20): UseNotificationsResult {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [notifications, setNotifications] = useState<GetNotificationDTO[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const [totalCount, setTotalCount] = useState(0);

  // –ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const lastCursorRef = useRef<string | undefined>(undefined);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const loadNotifications = useCallback(
    async (append: boolean = false) => {
      try {
        if (append) {
          setIsLoadingMore(true);
        } else {
          setIsLoading(true);
          lastCursorRef.current = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        }
        setError(null);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const result: NotificationApiResponse = await notificationsApi.getNotifications({
          size: pageSize,
          after: append ? lastCursorRef.current : undefined,
        });

        const newNotifications = result.data || [];

        if (append) {
          setNotifications(prev => [...prev, ...newNotifications]);
        } else {
          setNotifications(newNotifications);
        }

        setTotalCount(result.totalCount || 0);
        setHasMore(result.hasNext || false);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
        if (newNotifications.length > 0) {
          const newCursor = newNotifications[newNotifications.length - 1].id;

          lastCursorRef.current = newCursor;
        }
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';

        logger.error('‚ùå useNotifications –æ—à–∏–±–∫–∞:', err);
        setError(errorMessage);
      } finally {
        setIsLoading(false);
        setIsLoadingMore(false);
      }
    },
    [pageSize],
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadMore = useCallback(async () => {
    if (!hasMore || isLoadingMore || isLoading) {

      return;
    }

    await loadNotifications(true);
  }, [hasMore, isLoadingMore, isLoading, loadNotifications]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  const refresh = useCallback(async () => {
    await loadNotifications(false);
  }, [loadNotifications]);

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(async (id: string) => {
    try {
      await notificationsApi.markAsRead([id]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNotifications(prev =>
        prev.map(notification =>
          notification.id === id ? { ...notification, isRead: true } : notification,
        ),
      );

    } catch (err) {
      logger.error('‚ùå useNotifications.markAsRead –æ—à–∏–±–∫–∞:', err);
      throw err;
    }
  }, []);

  // –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const deleteNotification = useCallback(async (id: string) => {
    try {
      await notificationsApi.deleteNotification(id);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNotifications(prev => prev.filter(notification => notification.id !== id));

      logger.info('üóëÔ∏è useNotifications.deleteNotification —É—Å–ø–µ—à–Ω–æ:', id);
    } catch (err) {
      logger.error('‚ùå useNotifications.deleteNotification –æ—à–∏–±–∫–∞:', err);
      throw err;
    }
  }, []);

  // –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const unreadCount = notifications.filter(n => !n.isRead).length;

  return {
    notifications,
    isLoading,
    isLoadingMore,
    error,
    hasMore,
    totalCount,
    unreadCount,
    actions: {
      loadNotifications,
      loadMore,
      refresh,
      markAsRead,
      deleteNotification,
    },
  };
}
