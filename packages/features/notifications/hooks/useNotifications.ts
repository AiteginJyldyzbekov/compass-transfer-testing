'use client'

import { useState, useCallback, useRef, useMemo } from 'react';
import { notificationsApi, type GetNotificationDTO, type NotificationApiResponse } from '@shared/api/notifications';
import { logger } from '@shared/lib/logger';
import { NotificationType } from '@entities/notifications';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–∞–±–æ–≤
export enum NotificationCategory {
  ORDER = 'ORDER',
  IMPORTANT = 'IMPORTANT', 
  WARNING = 'WARNING'
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const NOTIFICATION_TYPE_TO_CATEGORY: Record<NotificationType, NotificationCategory> = {
  // –û –∑–∞–∫–∞–∑–µ
  [NotificationType.OrderCreated]: NotificationCategory.ORDER,
  [NotificationType.OrderUpdated]: NotificationCategory.ORDER,
  [NotificationType.OrderConfirmed]: NotificationCategory.ORDER,
  [NotificationType.OrderCancelled]: NotificationCategory.ORDER,
  [NotificationType.OrderCompleted]: NotificationCategory.ORDER,
  [NotificationType.RideRequest]: NotificationCategory.ORDER,
  [NotificationType.RideAccepted]: NotificationCategory.ORDER,
  [NotificationType.RideRejected]: NotificationCategory.ORDER,
  [NotificationType.RideStarted]: NotificationCategory.ORDER,
  [NotificationType.RideCompleted]: NotificationCategory.ORDER,
  [NotificationType.RideCancelled]: NotificationCategory.ORDER,
  [NotificationType.RideUpdate]: NotificationCategory.ORDER,
  [NotificationType.DriverHeading]: NotificationCategory.ORDER,
  [NotificationType.DriverArrived]: NotificationCategory.ORDER,
  [NotificationType.DriverAssigned]: NotificationCategory.ORDER,
  [NotificationType.DriverCancelled]: NotificationCategory.ORDER,
  [NotificationType.DriverNearby]: NotificationCategory.ORDER,
  
  // –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  [NotificationType.System]: NotificationCategory.IMPORTANT,
  [NotificationType.SystemMessage]: NotificationCategory.IMPORTANT,
  [NotificationType.Maintenance]: NotificationCategory.IMPORTANT,
  [NotificationType.Verification]: NotificationCategory.IMPORTANT,
  [NotificationType.Chat]: NotificationCategory.IMPORTANT,
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  [NotificationType.Payment]: NotificationCategory.WARNING,
  [NotificationType.PaymentReceived]: NotificationCategory.WARNING,
  [NotificationType.PaymentFailed]: NotificationCategory.WARNING,
  [NotificationType.PaymentRefunded]: NotificationCategory.WARNING,
  [NotificationType.Promo]: NotificationCategory.WARNING,
  [NotificationType.PromoOffer]: NotificationCategory.WARNING,
  [NotificationType.Unknown]: NotificationCategory.WARNING,
};

export interface UseNotificationsResult {
  notifications: GetNotificationDTO[];
  isLoading: boolean;
  isLoadingMore: boolean;
  error: string | null;
  hasMore: boolean;
  totalCount: number;
  unreadCount: number;
  // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  categoryCounts: Record<NotificationCategory, number>;
  unreadCategoryCounts: Record<NotificationCategory, number>;
  actions: {
    loadNotifications: (append?: boolean, category?: NotificationCategory) => Promise<void>;
    loadMore: () => Promise<void>;
    refresh: (category?: NotificationCategory) => Promise<void>;
    markAsRead: (id: string) => Promise<void>;
    deleteNotification: (id: string) => Promise<void>;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getNotificationTypesByCategory = (category: NotificationCategory): NotificationType[] => {
  return Object.entries(NOTIFICATION_TYPE_TO_CATEGORY)
    .filter(([, cat]) => cat === category)
    .map(([type]) => type as NotificationType);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const getNotificationCategory = (type: NotificationType): NotificationCategory => {
  return NOTIFICATION_TYPE_TO_CATEGORY[type] || NotificationCategory.WARNING;
};

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç notification-service –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 */
export function useNotifications(pageSize: number = 20): UseNotificationsResult {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [notifications, setNotifications] = useState<GetNotificationDTO[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const [totalCount, setTotalCount] = useState(0);
  const [_currentCategory, setCurrentCategory] = useState<NotificationCategory | undefined>(undefined);

  // –ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const lastCursorRef = useRef<string | undefined>(undefined);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const loadNotifications = useCallback(
    async (append: boolean = false, category?: NotificationCategory) => {
      try {
        if (append) {
          setIsLoadingMore(true);
        } else {
          setIsLoading(true);
          lastCursorRef.current = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          setCurrentCategory(category);
        }
        setError(null);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
        const apiParams: Record<string, unknown> = {
          size: pageSize,
          after: append ? lastCursorRef.current : undefined,
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (category) {
          apiParams.type = getNotificationTypesByCategory(category);
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º cursor-based –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const result: NotificationApiResponse = await notificationsApi.getMyNotifications(apiParams);

        const newNotifications = result.data || [];

        if (append) {
          setNotifications(prev => [...prev, ...newNotifications]);
        } else {
          setNotifications(newNotifications);
        }

        setTotalCount(result.totalCount || 0);
        setHasMore(result.hasNext || false);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
        if (newNotifications.length > 0) {
          const newCursor = newNotifications[newNotifications.length - 1].id;

          lastCursorRef.current = newCursor;
        }
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';

        logger.error('‚ùå useNotifications –æ—à–∏–±–∫–∞:', err);
        setError(errorMessage);
      } finally {
        setIsLoading(false);
        setIsLoadingMore(false);
      }
    },
    [pageSize],
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadMore = useCallback(async () => {
    if (!hasMore || isLoadingMore || isLoading) {

      return;
    }

    await loadNotifications(true);
  }, [hasMore, isLoadingMore, isLoading, loadNotifications]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  const refresh = useCallback(async (category?: NotificationCategory) => {
    await loadNotifications(false, category);
  }, [loadNotifications]);

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(async (id: string) => {
    try {
      await notificationsApi.markAsRead([id]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNotifications(prev =>
        prev.map(notification =>
          notification.id === id ? { ...notification, isRead: true } : notification,
        ),
      );

    } catch (err) {
      logger.error('‚ùå useNotifications.markAsRead –æ—à–∏–±–∫–∞:', err);
      throw err;
    }
  }, []);

  // –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const deleteNotification = useCallback(async (id: string) => {
    try {
      await notificationsApi.deleteNotification(id);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setNotifications(prev => prev.filter(notification => notification.id !== id));

      logger.info('üóëÔ∏è useNotifications.deleteNotification —É—Å–ø–µ—à–Ω–æ:', id);
    } catch (err) {
      logger.error('‚ùå useNotifications.deleteNotification –æ—à–∏–±–∫–∞:', err);
      throw err;
    }
  }, []);

  // –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const unreadCount = notifications.filter(n => !n.isRead).length;

  // –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏—Ö)
  const categoryCounts: Record<NotificationCategory, number> = {
    [NotificationCategory.ORDER]: 0,
    [NotificationCategory.IMPORTANT]: 0,
    [NotificationCategory.WARNING]: 0,
  };

  const unreadCategoryCounts: Record<NotificationCategory, number> = {
    [NotificationCategory.ORDER]: 0,
    [NotificationCategory.IMPORTANT]: 0,
    [NotificationCategory.WARNING]: 0,
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  notifications.forEach(notification => {
    const category = getNotificationCategory(notification.type);

    categoryCounts[category]++;
    if (!notification.isRead) {
      unreadCategoryCounts[category]++;
    }
  });


  const actions = useMemo(() => ({
    loadNotifications,
    loadMore,
    refresh,
    markAsRead,
    deleteNotification,
  }), [loadNotifications, loadMore, refresh, markAsRead, deleteNotification]);

  return {
    notifications,
    isLoading,
    isLoadingMore,
    error,
    hasMore,
    totalCount,
    unreadCount,
    categoryCounts,
    unreadCategoryCounts,
    actions,
  };
}
