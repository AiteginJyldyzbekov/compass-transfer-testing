'use client';

import { useRouter } from 'next/navigation';
import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import { driverAuthApi, type DriverLoginRequest } from '@shared/api/driver-auth';
import { logger } from '@shared/lib/logger';

export interface UseDriverAuthResult {
  isLoading: boolean;
  actions: {
    login: (data: DriverLoginRequest) => Promise<void>;
    logout: () => void;
  };
}

/**
 * –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
 */
export function useDriverAuth(): UseDriverAuthResult {
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
  const login = useCallback(async (data: DriverLoginRequest) => {
    try {
      setIsLoading(true);
      const response = await driverAuthApi.login(data);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage
      localStorage.setItem('accessToken', response.accessToken);
      localStorage.setItem('refreshToken', response.refreshToken);
      localStorage.setItem('user', JSON.stringify(response.user));
      
      toast.success('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      logger.info('üöó useDriverAuth.login —É—Å–ø–µ—à–Ω–æ:', response.user);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push('/');
    } catch (error) {
      logger.error('‚ùå useDriverAuth.login –æ—à–∏–±–∫–∞:', error);
      
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      
      toast.error(`‚ùå ${errorMessage}`);
      
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [router]);

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = useCallback(() => {
    try {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('user');
      
      toast.success('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      logger.info('üöó useDriverAuth.logout —É—Å–ø–µ—à–Ω–æ');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      router.push('/login');
    } catch (error) {
      logger.error('‚ùå useDriverAuth.logout –æ—à–∏–±–∫–∞:', error);
      toast.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  }, [router]);

  return {
    isLoading,
    actions: {
      login,
      logout,
    },
  };
}
