'use client';

import { useState, useCallback } from 'react';
import { toast } from 'sonner';
import { driverQueueApi, type JoinQueueResponse } from '@shared/api/driver-queue';
import { logger } from '@shared/lib/logger';

export interface UseDriverQueueResult {
  isInQueue: boolean;
  queueData: JoinQueueResponse | null;
  isLoading: boolean;
  actions: {
    joinQueue: () => Promise<void>;
    leaveQueue: () => Promise<void>;
    checkQueueStatus: () => Promise<void>;
  };
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é –≤–æ–¥–∏—Ç–µ–ª–µ–π
 */
export function useDriverQueue(): UseDriverQueueResult {
  const [isInQueue, setIsInQueue] = useState(false);
  const [queueData, setQueueData] = useState<JoinQueueResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
  const joinQueue = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await driverQueueApi.joinQueue();
      
      setIsInQueue(true);
      setQueueData(response);
      
      toast.success('‚úÖ –í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å');
      logger.info('üöó useDriverQueue.joinQueue —É—Å–ø–µ—à–Ω–æ:', response);
    } catch (error) {
      logger.error('‚ùå useDriverQueue.joinQueue –æ—à–∏–±–∫–∞:', error);
      toast.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å');
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  const leaveQueue = useCallback(async () => {
    try {
      setIsLoading(true);
      await driverQueueApi.leaveQueue();
      
      setIsInQueue(false);
      setQueueData(null);
      
      toast.success('‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
      logger.info('üöó useDriverQueue.leaveQueue —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      logger.error('‚ùå useDriverQueue.leaveQueue –æ—à–∏–±–∫–∞:', error);
      toast.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç API)
  const checkQueueStatus = useCallback(async () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    logger.info('üöó useDriverQueue.checkQueueStatus - –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
  }, []);

  return {
    isInQueue,
    queueData,
    isLoading,
    actions: {
      joinQueue,
      leaveQueue,
      checkQueueStatus,
    },
  };
}
