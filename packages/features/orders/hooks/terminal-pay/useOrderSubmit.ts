import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { useCallback, useEffect, useState } from 'react';
import { toast } from '@shared/lib/conditional-toast';
import { orderService } from '@shared/api/orders';
import { usePaymentContext } from '@shared/contexts/PaymentContext';
import type { OrderCancelledNotificationDTO } from '@shared/hooks/signal/interface';
import type { RideNotificationData } from '@shared/hooks/signal/types';
import { useSignalR } from '@shared/hooks/signal/useSignalR';
import { useFiscalReceipt } from '@entities/fiscal';
import type { GetLocationDTO } from '@entities/locations/interface';
import type { PaymentMethod } from '@entities/orders/constants/paymentMethods';
import { useTerminalReceipt } from '@entities/orders/context';
import type { CreateInstantOrderDTOType } from '@entities/orders/schemas/CreateInstantOrderDTO.schema';
import type { GetTariffDTO } from '@entities/tariffs/interface';
import type { GetTerminalDTO } from '@entities/users/interface';

interface UseOrderSubmitProps {
  economyTariff: GetTariffDTO | null;
  terminal: GetTerminalDTO | null;
  selectedLocations: GetLocationDTO[];
  calculatedPrice: number;
}

export const useOrderSubmit = ({
  economyTariff,
  terminal,
  selectedLocations,
  calculatedPrice,
}: UseOrderSubmitProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [orderId, _setOrderId] = useState<string | null>(null);
  const [showCardModal, setShowCardModal] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const router = useRouter();
  const signalR = useSignalR();
  const t = useTranslations('Payment');
  const { setReceiptData, setOrderData } = useTerminalReceipt();
  const { createTaxiReceipt: _createTaxiReceipt, isCreating: isFiscalCreating } = useFiscalReceipt();
  const { setPaymentSuccessHandler: _setPaymentSuccessHandler, setCardPaymentHandler: _setCardPaymentHandler } = usePaymentContext();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  useEffect(() => {
    if (!signalR.isConnected || !orderId) return;

    const handleRideAccepted = (data: RideNotificationData) => {

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ localStorage
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
        setReceiptData(data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        setOrderData({
          locations: selectedLocations.map(loc => ({
            id: loc.id,
            name: loc.name,
            address: loc.address,
            latitude: loc.latitude,
            longitude: loc.longitude,
          })),
          startLocation: terminal?.locationId
            ? {
                id: terminal.locationId,
                name: '–¢–µ—Ä–º–∏–Ω–∞–ª',
                address: '–ê–¥—Ä–µ—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
                latitude: 0,
                longitude: 0,
              }
            : undefined,
          tariff: economyTariff
            ? {
                id: economyTariff.id,
                name: economyTariff.name,
                basePrice: economyTariff.basePrice,
                minutePrice: economyTariff.minutePrice || 0,
                minimumPrice: economyTariff.minimumPrice || 0,
                perKmPrice: economyTariff.perKmPrice || 0,
                occupancy: 1, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è occupancy
              }
            : null,
          finalPrice: calculatedPrice,
        });
      } catch {
      }

      setIsLoading(false);
      router.push('/receipt');
    };

    const handleDriverNotFound = () => {
      setIsLoading(false);
      toast.error(t('errors.driverNotFound'));
    };

    const handleDriverCancelled = (_data: OrderCancelledNotificationDTO) => {
      setIsLoading(false);
      toast.error(t('errors.driverCancelled'));
    };

    signalR.on('RideAcceptedNotification', handleRideAccepted);
    signalR.on('DriverNotFoundNotification', handleDriverNotFound);
    signalR.on('OrderCancelledNotification', handleDriverCancelled);

    return () => {
      signalR.off('RideAcceptedNotification', handleRideAccepted);
      signalR.off('DriverNotFoundNotification', handleDriverNotFound);
      signalR.off('OrderCancelledNotification', handleDriverCancelled);
    };
  }, [
    signalR,
    signalR.isConnected,
    orderId,
    router,
    t,
    setReceiptData,
    setOrderData,
    selectedLocations,
    calculatedPrice,
    economyTariff,
    terminal,
  ]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π paymentId
  const createOrder = useCallback(
    async (paymentId?: string) => {
      if (!economyTariff?.id) {
        toast.error(t('errors.noTariff'));

        return false;
      }

      if (!terminal?.locationId) {
        toast.error(t('errors.startLocationMissing'));

        return false;
      }

      if (selectedLocations.length === 0) {
        toast.error(t('errors.noDestination'));

        return false;
      }

      setIsLoading(true);
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤ —Å–ø–∏—Å–∫–µ)
        const endLocation = selectedLocations[selectedLocations.length - 1];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        const additionalStops =
          selectedLocations.length > 1
            ? selectedLocations
                .slice(0, selectedLocations.length - 1)
                .map((loc: GetLocationDTO) => loc.id)
            : [];

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ CreateInstantOrderDTO
        const _requestBody: CreateInstantOrderDTOType = {
          tariffId: economyTariff.id,
          startLocationId: terminal.locationId,
          endLocationId: endLocation.id,
          additionalStops: additionalStops,
          initialPrice: Math.round(calculatedPrice),
          routeId: null,
          services: [],
          passengers: [
            {
              customerId: null,
              firstName: '–ü–∞—Å—Å–∞–∂–∏—Ä',
              lastName: null,
              isMainPassenger: true,
            },
          ],
          // –î–æ–±–∞–≤–ª—è–µ–º paymentId –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è QR-–ø–ª–∞—Ç–µ–∂–µ–π)
          ...(paymentId && { paymentId }),
        };

        const response = await orderService.createInstantOrderByTerminal(_requestBody);

        // ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if (response.id) {
          console.log('üßæ –°–æ–∑–¥–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞:', response.id);

          const route = `–¢–µ—Ä–º–∏–Ω–∞–ª ‚Üí ${selectedLocations.map(loc => loc.name).join(' ‚Üí ')}`;

          const fiscalSuccess = await _createTaxiReceipt({
            price: calculatedPrice,
            route,
            paymentMethod: paymentId ? 'QR' : 'CARD', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            orderId: response.id,
          });

          if (!fiscalSuccess) {
            // –ï—Å–ª–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –Ω–µ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            console.error('‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
            toast.error('‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º —á–µ–∫–æ–º');
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
        _setOrderId(response.id || null);

        return true;
      } catch (error: unknown) {
        setIsLoading(false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        const errorMessage = error instanceof Error ? error.message : String(error);
        const errorCode = (error as { code?: string })?.code;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (
          errorMessage.includes('StartLocationNotFound') ||
          errorMessage.includes('–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        ) {
          toast.error('–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } else if (errorMessage.includes('DriversNotFound') || errorCode === 'DRIVERS_NOT_FOUND') {
          toast.error(t('errors.driverNotFound'));
        } else {
          toast.error(t('errors.createOrderFailed'));
        }

        return false;
      }
    },
    [economyTariff, terminal, selectedLocations, calculatedPrice, t, _createTaxiReceipt],
  );

  // –£–î–ê–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
  // –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
  const handleMethodSelect = useCallback(
    async (selectedMethod: PaymentMethod) => {
      if (selectedMethod === 'card') {
        // –î–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –æ–ø–ª–∞—Ç—ã
        setShowCardModal(true);
        
        return;
      }

      if (selectedMethod === 'qrcode') {
        // –î–ª—è QR –ø–ª–∞—Ç–µ–∂–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR –º–æ–¥–∞–ª–∫—É
        setShowQRModal(true);

        return;
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
      toast.warning('Unsupported payment method:', selectedMethod);
    },
    [],
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–¥–ª—è QR)
  const createOrderWithPayment = useCallback(
    async (paymentId: string) => {
      return await createOrder(paymentId);
    },
    [createOrder],
  );

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∞–º–∏
  const closeCardModal = useCallback(() => {
    setShowCardModal(false);
  }, []);

  const closeQRModal = useCallback(() => {
    setShowQRModal(false);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∫–∞—Ä—Ç–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  const handleCardPaymentSuccess = useCallback(async () => {
    closeCardModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å—Ä–∞–∑—É
    await createOrder(); // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  }, [createOrder, closeCardModal]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  const handleCardPaymentCancel = useCallback(() => {
    closeCardModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
    toast.info('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.', { type: 'payment_cancelled' });
  }, [closeCardModal]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π QR –æ–ø–ª–∞—Ç—ã
  const handleQRPaymentSuccess = useCallback(async (paymentId: string) => {
    closeQRModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å—Ä–∞–∑—É
    await createOrder(paymentId); // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  }, [createOrder, closeQRModal]);

  return {
    isLoading: isLoading || isFiscalCreating,
    handleMethodSelect,
    createOrderWithPayment,
    showCardModal,
    showQRModal,
    closeCardModal,
    closeQRModal,
    handleCardPaymentSuccess,
    handleCardPaymentCancel,
    handleQRPaymentSuccess,
    calculatedPrice,
  };
};
