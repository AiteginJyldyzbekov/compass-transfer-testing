import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'sonner';
import { orderService } from '@shared/api/orders';
import type { DriverCancelledNotificationDTO } from '@shared/hooks/signal/interface';
import type { RideNotificationData } from '@shared/hooks/signal/types';
import { useSignalR } from '@shared/hooks/signal/useSignalR';
import { logger } from '@shared/lib/logger';
import type { GetLocationDTO } from '@entities/locations/interface';
import type { CreateInstantOrderDTOType } from '@entities/orders/schemas';
import type { GetTariffDTO } from '@entities/tariffs/interface';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
interface GetTerminalDTO {
  id: string;
  locationId: string;
  name: string;
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ö—É–∫–æ–≤
const useTerminalReceipt = () => ({
  setReceiptData: (_data: unknown) => {},
  setOrderData: (_data: unknown) => {},
});

const useFiscalReceipt = () => ({
  createTaxiReceipt: async (_data: unknown) => true,
  isCreating: false,
});

const showToast = {
  error: (message: string) => toast.error(message),
  success: (message: string) => toast.success(message),
  warn: (message: string) => toast.warning(message),
};

const setCardPaymentHandler = (_handler: () => Promise<void>) => {};
const clearCardPaymentHandler = () => {};

// –¢–∏–ø –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
type PaymentMethod = 'card' | 'qr';

interface UseOrderSubmitProps {
  economyTariff: GetTariffDTO | null;
  terminal: GetTerminalDTO | null;
  selectedLocations: GetLocationDTO[];
  calculatedPrice: number;
}

export const useOrderSubmit = ({
  economyTariff,
  terminal,
  selectedLocations,
  calculatedPrice,
}: UseOrderSubmitProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [orderId, setOrderId] = useState<string | null>(null);
  const router = useRouter();
  const signalR = useSignalR();
  const t = useTranslations('Payment');
  const { setReceiptData, setOrderData } = useTerminalReceipt();
  const { createTaxiReceipt, isCreating: isFiscalCreating } = useFiscalReceipt();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  useEffect(() => {
    if (!signalR.isConnected || !orderId) return;

    const handleRideAccepted = (data: RideNotificationData) => {
      logger.info('üöó –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º:', data);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ localStorage
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
        setReceiptData(data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        setOrderData({
          locations: selectedLocations.map(loc => ({
            id: loc.id,
            name: loc.name,
            address: loc.address,
            latitude: loc.latitude,
            longitude: loc.longitude,
          })),
          startLocation: terminal?.locationId
            ? {
                id: terminal.locationId,
                name: '–¢–µ—Ä–º–∏–Ω–∞–ª',
                address: '–ê–¥—Ä–µ—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞',
                latitude: 0,
                longitude: 0,
              }
            : undefined,
          tariff: economyTariff
            ? {
                id: economyTariff.id,
                name: economyTariff.name,
                basePrice: economyTariff.basePrice,
                minutePrice: economyTariff.minutePrice || 0,
                minimumPrice: economyTariff.minimumPrice || 0,
                perKmPrice: economyTariff.perKmPrice || 0,
                occupancy: 1, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è occupancy
              }
            : null,
          finalPrice: calculatedPrice,
        });

        logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞:', error);
      }

      setIsLoading(false);
      router.push('/receipt');
    };

    const handleDriverNotFound = () => {
      logger.warn('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      setIsLoading(false);
      showToast.error(t('errors.driverNotFound'));
    };

    const handleDriverCancelled = (data: DriverCancelledNotificationDTO) => {
      logger.warn('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑:', data);
      setIsLoading(false);
      showToast.error(t('errors.driverCancelled'));
    };

    signalR.on('RideAcceptedNotification', handleRideAccepted);
    signalR.on('DriverNotFoundNotification', handleDriverNotFound);
    signalR.on('OrderCancelledNotification', handleDriverCancelled);

    return () => {
      signalR.off('RideAcceptedNotification', handleRideAccepted);
      signalR.off('DriverNotFoundNotification', handleDriverNotFound);
      signalR.off('OrderCancelledNotification', handleDriverCancelled);
    };
  }, [
    signalR,
    orderId,
    router,
    t,
    setReceiptData,
    setOrderData,
    selectedLocations,
    calculatedPrice,
    economyTariff,
    terminal,
  ]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π paymentId
  const createOrder = useCallback(
    async (paymentId?: string) => {
      if (!economyTariff?.id) {
        showToast.error(t('errors.noTariff'));

        return false;
      }

      if (!terminal?.locationId) {
        showToast.error(t('errors.startLocationMissing'));

        return false;
      }

      if (selectedLocations.length === 0) {
        showToast.error(t('errors.noDestination'));

        return false;
      }

      setIsLoading(true);
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤ —Å–ø–∏—Å–∫–µ)
        const endLocation = selectedLocations[selectedLocations.length - 1];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        const additionalStops =
          selectedLocations.length > 1
            ? selectedLocations
                .slice(0, selectedLocations.length - 1)
                .map((loc: GetLocationDTO) => loc.id)
            : [];

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ CreateInstantOrderDTO
        const requestBody: CreateInstantOrderDTOType = {
          tariffId: economyTariff.id,
          startLocationId: terminal.locationId,
          endLocationId: endLocation.id,
          additionalStops: additionalStops,
          initialPrice: calculatedPrice,
          routeId: null,
          services: [],
          passengers: [
            {
              customerId: null,
              firstName: '–ü–∞—Å—Å–∞–∂–∏—Ä',
              lastName: null,
              isMainPassenger: true,
            },
          ],
          // –î–æ–±–∞–≤–ª—è–µ–º paymentId –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è QR-–ø–ª–∞—Ç–µ–∂–µ–π)
          ...(paymentId && { paymentId }),
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º:', {
          terminalId: terminal.id,
          terminalLocationId: terminal.locationId,
          requestBody,
        });

        const response = await orderService.createInstantOrderByTerminal(requestBody);

        // ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if (response.id) {
          logger.info('üßæ –°–æ–∑–¥–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞:', response.id);

          const route = `–¢–µ—Ä–º–∏–Ω–∞–ª ‚Üí ${selectedLocations.map(loc => loc.name).join(' ‚Üí ')}`;

          const fiscalSuccess = await createTaxiReceipt({
            price: calculatedPrice,
            route,
            paymentMethod: paymentId ? 'QR' : 'CARD', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            orderId: response.id,
          });

          if (!fiscalSuccess) {
            // –ï—Å–ª–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –Ω–µ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            logger.error('‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
            showToast.warn('‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º —á–µ–∫–æ–º');
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
        setOrderId(response.id || null);

        return true;
      } catch (error: unknown) {
        setIsLoading(false);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        const errorMessage = error instanceof Error ? error.message : String(error);
        const errorCode = (error as { code?: string })?.code;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (
          errorMessage.includes('StartLocationNotFound') ||
          errorMessage.includes('–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        ) {
          showToast.error('–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } else if (errorMessage.includes('DriversNotFound') || errorCode === 'DRIVERS_NOT_FOUND') {
          showToast.error(t('errors.driverNotFound'));
        } else {
          showToast.error(t('errors.createOrderFailed'));
        }

        return false;
      }
    },
    [economyTariff, terminal, selectedLocations, calculatedPrice, t, createTaxiReceipt],
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
  const handleMethodSelect = useCallback(
    async (selectedMethod: PaymentMethod) => {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É, –∞ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞—ë–º –ü–û–°–õ–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
      if (selectedMethod === 'card') {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        setCardPaymentHandler(async () => {
          await createOrder();
          // –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
          clearCardPaymentHandler();
        });
        // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π

        return;
      }

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ QR-–∫–æ–¥–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–º–æ–¥–∞–ª–∫—É
      // –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      if (selectedMethod === 'qr') {
        // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ QR-–∫–æ–¥
      }
    },
    [createOrder],
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–¥–ª—è QR)
  const createOrderWithPayment = useCallback(
    async (paymentId: string) => {
      logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º:', paymentId);

      return await createOrder(paymentId);
    },
    [createOrder],
  );

  return {
    isLoading: isLoading || isFiscalCreating,
    handleMethodSelect,
    createOrderWithPayment,
  };
};
