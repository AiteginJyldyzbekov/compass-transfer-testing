'use client';

import { useRouter } from 'next/navigation';
import { useCallback } from 'react';
import type { UseFormReturn } from 'react-hook-form';
import { logger } from '@shared/lib/logger';
import type { GetLocationDTO } from '@entities/locations/interface';
import type { OrderServiceDTO, PassengerDTO, GetScheduledOrderDTO } from '@entities/orders/interface';
import type { CreateScheduledOrderDTOType } from '@entities/orders/schemas';
import type { PartnerRouteDTO } from '@entities/routes/interface/PartnerRouteDTO';
import type { GetTariffDTO } from '@entities/tariffs/interface';
import type { GetDriverDTO } from '@entities/users/interface';
import { useScheduledOrderSubmit } from '@features/orders/hooks/scheduled/admin-pay/useScheduledOrderSubmit';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
type RouteMode = 'manual' | 'template';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–¥–∏—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º car
interface ExtendedGetDriverDTO extends GetDriverDTO {
  car?: {
    id: string;
    [key: string]: unknown;
  };
}

export interface UseScheduledOrderHandlersProps {
  mode: 'create' | 'edit';
  id?: string;
  orderData: CreateScheduledOrderDTOType | null;
  rawOrderData: GetScheduledOrderDTO | null;
  methods: UseFormReturn<CreateScheduledOrderDTOType>;
  selectedServices: OrderServiceDTO[];
  passengers: PassengerDTO[];
  selectedRouteId: string;
  routeMode: RouteMode;
  setSelectedTariff: (tariff: GetTariffDTO | null) => void;
  setRouteLocations: (locations: GetLocationDTO[]) => void;
  setSelectedRouteId: (id: string) => void;
  setRouteMode: (mode: RouteMode) => void;
  setSelectedDriverId: (id: string) => void;
}

/**
 * –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è ScheduledOrderForm
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
export const useScheduledOrderHandlers = ({
  mode,
  id,
  orderData: _orderData,
  rawOrderData,
  methods,
  selectedServices,
  passengers,
  selectedRouteId,
  routeMode: _routeMode,
  setSelectedTariff,
  setRouteLocations,
  setSelectedRouteId,
  setRouteMode,
  setSelectedDriverId,
}: UseScheduledOrderHandlersProps) => {
  const router = useRouter();

  const {
    handleSubmit,
    handleCancel,
    isLoading: isSubmitting,
  } = useScheduledOrderSubmit({
    mode,
    id,
    orderData: rawOrderData,
    onSuccess: () => {
      router.push('/orders');
    },
    onCancel: () => router.push('/orders'),
  });

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò UI ===
  const handleTariffSelect = useCallback(
    (tariff: GetTariffDTO) => {
      logger.info('handleTariffSelect called with tariff:', tariff);
      setSelectedTariff(tariff);
      methods.setValue('tariffId', tariff.id);
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ useEffect –≤ RouteMapSelector
    },
    [methods, setSelectedTariff],
  );

  const handleLocationsChange = useCallback(
    (locations: GetLocationDTO[]) => {
      setRouteLocations(locations);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      const [start, ...rest] = locations;
      const end = rest.length > 0 ? rest[rest.length - 1] : null;
      const stops = rest.length > 1 ? rest.slice(0, -1) : [];

      methods.setValue('startLocationId', start?.id || null);
      methods.setValue('endLocationId', end?.id || null);
      methods.setValue(
        'additionalStops',
        stops.map(s => s.id),
      );
      methods.setValue('routeType', 'manual');
    },
    [methods, setRouteLocations],
  );

  const handleRouteSelect = useCallback(
    (route: PartnerRouteDTO) => {
      setSelectedRouteId(route.id);
      methods.setValue('routeId', route.id);
      methods.setValue('routeType', 'template');
      // –û—á–∏—â–∞–µ–º —Ä—É—á–Ω—ã–µ –ø–æ–ª—è
      methods.setValue('startLocationId', null);
      methods.setValue('endLocationId', null);
      methods.setValue('additionalStops', []);

      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ä—à—Ä—É—Ç–∞
      setSelectedDriverId('');
      methods.setValue('driverId', '');
      methods.setValue('carId', '');
    },
    [methods, setSelectedRouteId, setSelectedDriverId],
  );

  const handleRouteModeChange = useCallback(
    (mode: RouteMode) => {
      setRouteMode(mode);

      if (mode === 'manual') {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º - –æ—á–∏—â–∞–µ–º —à–∞–±–ª–æ–Ω
        setSelectedRouteId('');
        methods.setValue('routeId', null);
        methods.setValue('routeType', 'manual');
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —à–∞–±–ª–æ–Ω–∞ - –æ—á–∏—â–∞–µ–º —Ä—É—á–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        if (!selectedRouteId) {
          methods.setValue('startLocationId', null);
          methods.setValue('endLocationId', null);
          methods.setValue('additionalStops', []);
        }
        methods.setValue('routeType', 'template');
      }
    },
    [methods, selectedRouteId, setRouteMode, setSelectedRouteId],
  );

  const handleDriverSelect = useCallback(
    (driverIdOrDriver: string | ExtendedGetDriverDTO) => {
      logger.info('üöó handleDriverSelect –≤—ã–∑–≤–∞–Ω —Å:', driverIdOrDriver);

      if (typeof driverIdOrDriver === 'object' && driverIdOrDriver?.id) {
        const driver = driverIdOrDriver;

        logger.info('üìã –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:', {
          id: driver.id,
          activeCar: driver.activeCar,
          activeCarId: driver.activeCarId,
          car: driver.car,
        });

        setSelectedDriverId(driver.id);
        methods.setValue('driverId', driver.id);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ carId
        let carId = '';

        if (driver.activeCar?.id) {
          carId = driver.activeCar.id;
          logger.info('‚úÖ carId –∏–∑ activeCar.id:', carId);
        } else if (driver.activeCarId) {
          carId = driver.activeCarId;
          logger.info('‚úÖ carId –∏–∑ activeCarId:', carId);
        } else if (driver.car?.id) {
          carId = driver.car.id;
          logger.info('‚úÖ carId –∏–∑ car.id:', carId);
        } else {
          logger.warn('‚ùå carId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è');
        }

        if (carId) {
          methods.setValue('carId', carId);
          logger.info('‚úÖ carId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É:', carId);
        } else {
          methods.setValue('carId', '');
          logger.warn('‚ùå carId –æ—á–∏—â–µ–Ω –≤ —Ñ–æ—Ä–º–µ');
        }
      } else {
        const driverId = driverIdOrDriver as string;

        logger.info('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID:', driverId);

        setSelectedDriverId(driverId || '');
        methods.setValue('driverId', driverId || '');
        if (!driverId) {
          methods.setValue('carId', '');
          logger.warn('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –∏ carId –æ—á–∏—â–µ–Ω—ã');
        } else {
          logger.warn('‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ driverId, carId –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å');
        }
      }
    },
    [methods, setSelectedDriverId],
  );

  const handleFormSubmit = useCallback(
    (data: CreateScheduledOrderDTOType) => {
      logger.info('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        driverId: data.driverId,
        carId: data.carId,
        hasDriverAndCar: !!(data.driverId && data.carId),
      });

      const formData = {
        ...data,
        services: selectedServices.map(service => ({
          serviceId: service.serviceId,
          quantity: service.quantity,
          notes: service.notes,
        })),
        passengers,
        waypoints: [],
      };

      handleSubmit(formData);
    },
    [handleSubmit, selectedServices, passengers],
  );

  const handleAddRoute = useCallback(() => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    logger.info(
      '–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π.',
    );
  }, []);

  return {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    handleTariffSelect,
    handleLocationsChange,
    handleRouteSelect,
    handleRouteModeChange,
    handleDriverSelect,
    handleFormSubmit,
    handleAddRoute,
    handleCancel,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    isSubmitting,
  };
};
