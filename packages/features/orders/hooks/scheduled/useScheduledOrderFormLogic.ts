'use client';

import { useState, useRef, useEffect } from 'react';
import type { UseFormReturn } from 'react-hook-form';
import { logger } from '@shared/lib/logger';
import type { GetLocationDTO } from '@entities/locations/interface';
import type { CreateScheduledOrderDTOType } from '@entities/orders/schemas';
import type { GetTariffDTO } from '@entities/tariffs/interface';
import { Role } from '@entities/users/enums/Role.enum';
import { useScheduledOrderData } from '@features/orders/hooks/scheduled/admin-pay/useScheduledOrderData';
import { useScheduledOrderForm } from '@features/orders/hooks/scheduled/admin-pay/useScheduledOrderForm';
import { useOrderFormData } from '@features/orders/hooks/shared/useOrderFormData';
import { useOrderLocations } from '@features/orders/hooks/shared/useOrderLocations';
import { useOrderPricing } from '@features/orders/hooks/shared/useOrderPricing';
import { useScheduledOrderPassengers } from './useScheduledOrderPassengers';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
type RouteMode = 'manual' | 'template';

interface PassengerData {
  customerId?: string;
  isMainPassenger?: boolean;
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è usePartnerRoutes
const usePartnerRoutes = (_passenger: unknown) => ({
  routes: [],
  isLoading: false,
});

export interface UseScheduledOrderFormLogicProps {
  mode: 'create' | 'edit';
  id?: string;
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è ScheduledOrderForm
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 */
export const useScheduledOrderFormLogic = ({ mode, id }: UseScheduledOrderFormLogicProps) => {
  // === –°–û–°–¢–û–Ø–ù–ò–ï UI ===
  const [selectedTariff, setSelectedTariff] = useState<GetTariffDTO | null>(null);
  const [selectedRouteId, setSelectedRouteId] = useState<string>('');
  const [routeLocations, setRouteLocations] = useState<GetLocationDTO[]>([]);
  const [selectedDriverId, setSelectedDriverId] = useState<string>('');
  const [routeMode, setRouteMode] = useState<RouteMode>('manual');

  // === –•–£–ö–ò –î–ê–ù–ù–´–• ===
  const {
    orderData,
    rawOrderData,
    isLoading: isOrderLoading,
    error: orderError,
  } = useScheduledOrderData(id, mode);
  const { users, tariffs, services, isLoading: isDataLoading, error } = useOrderFormData();
  const methods = useScheduledOrderForm(orderData || undefined);

  // === –ó–ê–ì–†–£–ó–ö–ê –õ–û–ö–ê–¶–ò–ô –ó–ê–ö–ê–ó–ê ===
  const {
    selectedLocations: orderLocations,
    isLoading: _isLocationsLoading,
    error: _locationsError,
  } = useOrderLocations({
    startLocationId: orderData?.startLocationId,
    endLocationId: orderData?.endLocationId,
    additionalStops: orderData?.additionalStops,
    mode,
  });

  // === –•–£–ö–ò –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò ===
  const {
    passengers,
    handlePassengersChange,
    handleAddNewPassenger,
    handleUpdatePassenger,
    handleRemovePassenger,
    handleSetMainPassenger,
    handleUserSelection,
  } = useScheduledOrderPassengers({
    orderData,
    mode,
    methods: methods as UseFormReturn<CreateScheduledOrderDTOType>,
  });

  const {
    selectedServices,
    currentPrice,
    memoizedInitialSelectedServices,
    handleServicesChange,
    handlePriceChange,
  } = useOrderPricing({
    orderData,
    mode,
    methods: methods as UseFormReturn<CreateScheduledOrderDTOType>,
    services,
  });

  // === –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ===
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: routeLocations - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º routeLocations –∏–∑ orderLocations —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const displayLocations = routeLocations;
  const startLocation = displayLocations[0] || null;
  const endLocation =
    displayLocations.length >= 2 ? displayLocations[displayLocations.length - 1] : null;
  const additionalStops = displayLocations.length > 2 ? displayLocations.slice(1, -1) : [];

  // ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–æ–∑–¥–∞–µ–º stableOrderLocations –¥–ª—è useScheduledOrderInitialization
  const stableOrderLocations = orderLocations;

  // === –ú–ê–†–®–†–£–¢–´ –ü–ê–†–¢–ù–ï–†–ê ===
  // –ù–∞—Ö–æ–¥–∏–º –ì–õ–ê–í–ù–û–ì–û –ø–∞—Å—Å–∞–∂–∏—Ä–∞-–ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
  const mainPartnerPassenger = passengers.find((passenger: PassengerData) => {
    const user = users.find(u => u.id === passenger.customerId);

    return passenger.isMainPassenger && user?.role === Role.Partner;
  });

  const { routes: partnerRoutes, isLoading: isPartnerRoutesLoading } = usePartnerRoutes(
    mainPartnerPassenger,
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  const allAvailableRoutes = partnerRoutes;
  const isRoutesLoading = isPartnerRoutesLoading;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä-–ø–∞—Ä—Ç–Ω–µ—Ä
  const hasMainPartner = !!mainPartnerPassenger;

  // === –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –í–ê–õ–ò–î–ê–¶–ò–ò ===
  const routeValidationError = methods.formState.errors.routeId;
  const hasRouteError = !!routeValidationError;

  // === –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò ===
  const isLoading = isDataLoading || isOrderLoading || _isLocationsLoading;
  const loadingError = error || orderError || _locationsError;

  // === –§–õ–ê–ì–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
  const isLocationsInitialized = useRef(false);
  const isDataInitialized = useRef(false);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º routeLocations –∏–∑ orderLocations —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    if (!isLocationsInitialized.current && orderLocations.length > 0) {
      logger.info('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º routeLocations –∏–∑ orderLocations:', orderLocations);
      setRouteLocations(orderLocations);
      isLocationsInitialized.current = true;
    }
  }, [orderLocations]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
    selectedTariff,
    setSelectedTariff,
    selectedRouteId,
    setSelectedRouteId,
    routeLocations,
    setRouteLocations,
    selectedDriverId,
    setSelectedDriverId,
    routeMode,
    setRouteMode,

    // –î–∞–Ω–Ω—ã–µ
    orderData,
    rawOrderData,
    users,
    tariffs,
    services,
    methods,

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    passengers,
    handlePassengersChange,
    handleAddNewPassenger,
    handleUpdatePassenger,
    handleRemovePassenger,
    handleSetMainPassenger,
    handleUserSelection,
    selectedServices,
    currentPrice,
    memoizedInitialSelectedServices,
    handleServicesChange,
    handlePriceChange,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    displayLocations,
    startLocation,
    endLocation,
    additionalStops,
    stableOrderLocations,
    mainPartnerPassenger,
    allAvailableRoutes,
    isRoutesLoading,
    hasMainPartner,
    hasRouteError,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading,
    loadingError,

    // –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isLocationsInitialized,
    isDataInitialized,
  };
};
