import { useCallback } from 'react';
import { toast } from 'sonner';
import { orderService } from '@shared/api/orders';
import { CreateScheduledOrderDTOSchema, type CreateScheduledOrderDTOType } from '@entities/orders/schemas';
import { useOrderSubmit, type OrderSubmitOptions } from '@features/orders/hooks/shared/useOrderSubmit';

// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è GetScheduledOrderDTO
type GetScheduledOrderDTO = {
  id: string;
  scheduledTime: string;
  passengers: unknown[];
  rides?: Array<{
    id: string;
    driverId?: string;
    carId?: string;
  }>;
};

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const rideService = {
  updateRide: async (_id: string, _data: unknown) => ({ id: _id }),
  createRide: async (_data: unknown) => ({ id: 'new-ride-id' }),
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è RideStatus
const RideStatus = {
  Requested: 'requested',
  Accepted: 'accepted',
  InProgress: 'in_progress',
  Completed: 'completed',
  Cancelled: 'cancelled',
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è showToast
const showToast = {
  error: (message: string) => toast.error(message),
  success: (message: string) => toast.success(message),
  warn: (message: string) => toast.warning(message),
};

interface UseScheduledOrderSubmitProps {
  mode: 'create' | 'edit';
  id?: string;
  onSuccess?: () => void;
  onCancel?: () => void;
  orderData?: GetScheduledOrderDTO | null;
  passengers?: any[];
  onPassengersChange?: (passengers: any[]) => void;
}

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const transformDataForAPI = (data: CreateScheduledOrderDTOType): CreateScheduledOrderDTOType => {
  try {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
    return CreateScheduledOrderDTOSchema.parse(data);
  } catch {
    // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    // (–æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ–æ—Ä–º—ã)
    return data;
  }
};

/**
 * –•—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
export const useScheduledOrderSubmit = ({
  mode,
  id,
  onSuccess,
  onCancel,
  orderData,
  passengers: _passengers = [],
  onPassengersChange,
}: UseScheduledOrderSubmitProps) => {
  const submitFn = useCallback(
    async (data: CreateScheduledOrderDTOType, options: OrderSubmitOptions) => {
      console.log('üì§ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', data);
      console.log('üì§ Services –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', data.services);

      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const transformedData = transformDataForAPI(data);

      if (options.mode === 'edit' && options.id) {
        // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º orderId –∏ status
        const updateData = {
          ...transformedData,
          orderId: options.id,
          status: 'Pending',
        };

        const result = await orderService.updateScheduledOrder(options.id, updateData);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (
          transformedData.passengers &&
          transformedData.passengers.length > 0 &&
          onPassengersChange
        ) {
          onPassengersChange(transformedData.passengers);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–µ–∑–¥–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        if (orderData && orderData.rides && orderData.rides.length > 0) {
          const existingRide = orderData.rides[0];

          if (transformedData.driverId && transformedData.carId) {
            try {
              await rideService.updateRide(existingRide.id, {
                orderId: options.id,
                driverId: transformedData.driverId,
                carId: transformedData.carId,
                status: RideStatus.Requested,
                waypoints: transformedData.waypoints || [],
              });
            } catch (error) {
              showToast.error('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏');
              throw error;
            }
          } else {
            try {
              await rideService.updateRide(existingRide.id, {
                orderId: options.id,
                driverId: existingRide.driverId,
                carId: existingRide.carId,
                status: RideStatus.Cancelled,
                waypoints: [],
              });
            } catch (error) {
              showToast.error('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–µ–∑–¥–∫–∏');
              throw error;
            }
          }
        } else if (transformedData.driverId && transformedData.carId) {
          try {
            await orderService.createScheduledRide(options.id, {
              driverId: transformedData.driverId,
              carId: transformedData.carId,
              waypoints: transformedData.waypoints || [],
            });
          } catch (error) {
            showToast.error('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏');
            throw error;
          }
        }

        return result;
      } else {
        // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const result = await orderService.createScheduledOrder(transformedData);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å –∏ –∞–≤—Ç–æ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ä–µ–π—Å –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if (transformedData.driverId && transformedData.carId) {
          try {
            await orderService.createScheduledRide(result.id, {
              driverId: transformedData.driverId,
              carId: transformedData.carId,
              waypoints: transformedData.waypoints || [],
            });
          } catch (error) {
            showToast.error('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è');
            throw error;
          }
        }

        return result;
      }
    },
    [orderData, onPassengersChange],
  );

  const options: OrderSubmitOptions = {
    mode: mode === 'create' ? 'create' : 'edit',
    id,
    onSuccess,
    onCancel,
  };

  return useOrderSubmit<CreateScheduledOrderDTOType>(submitFn, options);
};
