'use client';

import { useEffect, useRef } from 'react';
import type { UseFormReturn } from 'react-hook-form';
import { tariffsApi } from '@shared/api/tariffs';
import { usersApi } from '@shared/api/users';
import { logger } from '@shared/lib/logger';
import type { GetLocationDTO } from '@entities/locations/interface';
import type { GetScheduledOrderDTO } from '@entities/orders/interface';
import type { CreateScheduledOrderDTOType } from '@entities/orders/schemas';
import type { GetTariffDTO } from '@entities/tariffs/interface';
import type { GetDriverDTO } from '@entities/users/interface';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
type RouteMode = 'manual' | 'template';

export interface UseScheduledOrderInitializationProps {
  mode: 'create' | 'edit';
  orderData: CreateScheduledOrderDTOType | null;
  rawOrderData: GetScheduledOrderDTO | null;
  tariffs: GetTariffDTO[];
  selectedTariff: GetTariffDTO | null;
  routeMode: RouteMode;
  hasMainPartner: boolean;
  stableOrderLocations: GetLocationDTO[];
  isLocationsInitialized: { current: boolean };
  isDataInitialized: { current: boolean };
  methods: UseFormReturn<CreateScheduledOrderDTOType>;
  setSelectedTariff: (tariff: GetTariffDTO | null) => void;
  setRouteLocations: (locations: GetLocationDTO[]) => void;
  setSelectedRouteId: (id: string) => void;
  setRouteMode: (mode: RouteMode) => void;
  setSelectedDriverId: (id: string) => void;
}

/**
 * –õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è ScheduledOrderForm
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
 */
export const useScheduledOrderInitialization = ({
  mode,
  orderData,
  rawOrderData,
  tariffs,
  selectedTariff,
  routeMode,
  hasMainPartner,
  stableOrderLocations,
  isLocationsInitialized,
  isDataInitialized,
  methods,
  setSelectedTariff,
  setRouteLocations,
  setSelectedRouteId,
  setRouteMode,
  setSelectedDriverId,
}: UseScheduledOrderInitializationProps) => {
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  const setSelectedTariffRef = useRef(setSelectedTariff);
  const setRouteLocationsRef = useRef(setRouteLocations);
  const setSelectedRouteIdRef = useRef(setSelectedRouteId);
  const setRouteModeRef = useRef(setRouteMode);
  const setSelectedDriverIdRef = useRef(setSelectedDriverId);

  setSelectedTariffRef.current = setSelectedTariff;
  setRouteLocationsRef.current = setRouteLocations;
  setSelectedRouteIdRef.current = setSelectedRouteId;
  setRouteModeRef.current = setRouteMode;
  setSelectedDriverIdRef.current = setSelectedDriverId;

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
  const orderDataKey = orderData ? `${orderData.tariffId}-${mode}` : null;
  const rawOrderDataKey = rawOrderData
    ? `${rawOrderData.id}-${rawOrderData.rides?.length || 0}`
    : null;
  const locationsKey = stableOrderLocations.map(loc => loc?.id).join(',');
  const selectedTariffKey = selectedTariff?.id || null;

  // === –°–ë–†–û–° –§–õ–ê–ì–û–í –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –†–ï–ñ–ò–ú–ê/ID ===
  useEffect(() => {
    isLocationsInitialized.current = false;
    isDataInitialized.current = false;
  }, [mode, orderDataKey, isLocationsInitialized, isDataInitialized]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ö–ê–¶–ò–ô –í –†–ï–ñ–ò–ú–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
  useEffect(() => {
    if (mode === 'edit' && stableOrderLocations.length > 0 && !isLocationsInitialized.current) {
      setRouteLocationsRef.current([...stableOrderLocations]);
      isLocationsInitialized.current = true;
    }
  }, [mode, stableOrderLocations, locationsKey, isLocationsInitialized]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –ü–ï–†–í–û–ì–û –¢–ê–†–ò–§–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò ===
  useEffect(() => {
    if (mode === 'create' && tariffs.length > 0 && !selectedTariff) {
      const firstTariff = tariffs[0];

      setSelectedTariffRef.current(firstTariff);
      methods.setValue('tariffId', firstTariff.id);
    }
  }, [mode, tariffs, selectedTariff, selectedTariffKey]); // –£–±–∏—Ä–∞–µ–º methods –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–†–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ò ===
  useEffect(() => {
    if (orderData && rawOrderData && mode === 'edit' && !isDataInitialized.current) {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞
      if (orderData.tariffId) {
        const tariffIdToUse = rawOrderData.tariffId || orderData.tariffId;
        const tariff = tariffs.find(t => t.id === tariffIdToUse);

        if (tariff) {
          setSelectedTariffRef.current(tariff);
          methods.setValue('tariffId', tariffIdToUse);
        } else {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ –æ—Ç–¥–µ–ª—å–Ω–æ
          tariffsApi
            .getTariffById(tariffIdToUse)
            .then((loadedTariff: GetTariffDTO) => {
              logger.info('‚úÖ –¢–∞—Ä–∏—Ñ –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ:', loadedTariff);
              setSelectedTariffRef.current(loadedTariff as GetTariffDTO);
              methods.setValue('tariffId', tariffIdToUse);
            })
            .catch((error: unknown) => {
              logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–∞:', error);
            });
        }
      } else {
        logger.warn('‚ö†Ô∏è tariffId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ orderData');
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
      if (orderData.scheduledTime) {
        logger.info('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏:', {
          originalTime: orderData.scheduledTime,
          rawTime: rawOrderData.scheduledTime,
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ rawOrderData –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        const timeToUse = rawOrderData.scheduledTime || orderData.scheduledTime;

        try {
          // –°–æ–∑–¥–∞–µ–º Date –æ–±—ä–µ–∫—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è input[type="datetime-local"]
          const date = new Date(timeToUse);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
          if (!isNaN(date.getTime())) {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DDTHH:mm
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            const localDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;

            logger.info('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º—É:', localDateTime);
            methods.setValue('scheduledTime', localDateTime);
          } else {
            logger.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞:', timeToUse);
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏:', error, timeToUse);
        }
      } else {
        logger.warn('‚ö†Ô∏è scheduledTime –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ orderData');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      if (orderData.routeType === 'template' && orderData.routeId) {
        setSelectedRouteIdRef.current(orderData.routeId);
        setRouteModeRef.current('template');
        methods.setValue('routeId', orderData.routeId);
        methods.setValue('routeType', 'template');
      } else if (orderData.routeType === 'manual') {
        setRouteModeRef.current('manual');
        methods.setValue('startLocationId', orderData.startLocationId);
        methods.setValue('endLocationId', orderData.endLocationId);
        methods.setValue('routeType', 'manual');
        methods.setValue('additionalStops', orderData.additionalStops || []);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ rides
      if (rawOrderData.rides && rawOrderData.rides.length > 0) {
        const ride = rawOrderData.rides[0];

        logger.info('üöó –ù–∞–π–¥–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º:', ride);

        if (ride.driverId) {
          logger.info('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ:', ride.driverId);

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ getDriverById
          usersApi
            .getDriver(ride.driverId)
            .then((driverData: GetDriverDTO) => {
              logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:', driverData);

              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
              setSelectedDriverIdRef.current(driverData.id);
              methods.setValue('driverId', driverData.id);

              // –ò–∑–≤–ª–µ–∫–∞–µ–º carId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
              let carId = '';

              if (driverData.activeCar?.id) {
                carId = driverData.activeCar.id;
                logger.info('‚úÖ carId –∏–∑ activeCar.id:', carId);
              } else if (driverData.activeCarId) {
                carId = driverData.activeCarId;
                logger.info('‚úÖ carId –∏–∑ activeCarId:', carId);
              } else {
                logger.warn('‚ùå carId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è');
              }

              if (carId) {
                methods.setValue('carId', carId);
                logger.info('‚úÖ carId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', carId);
              }
            })
            .catch((error: unknown) => {
              logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è:', error);

              // Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –≤–æ–¥–∏—Ç–µ–ª—è
              setSelectedDriverIdRef.current(ride.driverId);
              methods.setValue('driverId', ride.driverId);
            });
        }
      }

      // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–´–• –ü–û–õ–ï–ô
      logger.info('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', {
        description: orderData.description,
        airFlight: orderData.airFlight,
        flyReis: orderData.flyReis,
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      if (orderData.description !== undefined) {
        methods.setValue('description', orderData.description);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –ø—Ä–∏–ª–µ—Ç–∞
      if (orderData.airFlight !== undefined) {
        methods.setValue('airFlight', orderData.airFlight);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –≤—ã–ª–µ—Ç–∞
      if (orderData.flyReis !== undefined) {
        methods.setValue('flyReis', orderData.flyReis);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      isDataInitialized.current = true;
    }
  }, [
    mode,
    orderDataKey, // ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á
    rawOrderDataKey, // ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á
    tariffs,
    isDataInitialized,
    orderData,
    rawOrderData,
  ]); // –£–±–∏—Ä–∞–µ–º methods –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í –†–£–ß–ù–û–ô –†–ï–ñ–ò–ú ===
  useEffect(() => {
    if (!hasMainPartner && routeMode === 'template') {
      setRouteModeRef.current('manual');
      methods.setValue('routeType', 'manual');
      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
      setSelectedRouteIdRef.current('');
      methods.setValue('routeId', null);
    }
  }, [hasMainPartner, routeMode]); // –£–±–∏—Ä–∞–µ–º methods –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
};
