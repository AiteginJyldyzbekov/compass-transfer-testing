'use client';

import { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import apiClient from '@shared/api/client';
import { usersApi } from '@shared/api/users';
import type { MapBounds } from '@shared/components/map/types';
import type { GetLocationDTO } from '@entities/locations/interface';
import { useActiveDrivers, type ActiveDriver } from '@features/drivers/hooks/useActiveDrivers';
import { useLocations } from '@features/locations/hooks/useLocations';

interface RoutePoint {
  id: string;
  location: GetLocationDTO | null;
  type: 'start' | 'end' | 'intermediate';
  label: string;
}

interface Ride {
  id: string;
  driverId: string;
}

interface UseOrderLocationsParams {
  startLocationId?: string | null;
  endLocationId?: string | null;
  additionalStops?: string[];
  mode?: 'create' | 'edit';
  rides?: Ride[]; // –î–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  // –í–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
  externalRoutePoints?: RoutePoint[];
  setExternalRoutePoints?: (points: RoutePoint[]) => void;
  externalSelectedDriver?: Driver | null;
  setExternalSelectedDriver?: (driver: Driver | null) => void;
  externalDynamicMapCenter?: { latitude: number; longitude: number } | null;
  setExternalDynamicMapCenter?: (center: { latitude: number; longitude: number } | null) => void;
  externalOpenDriverPopupId?: string | null;
  setExternalOpenDriverPopupId?: (id: string | null) => void;

  onRouteChange?: (routePoints: RoutePoint[]) => void;
  onRoutePointsChange?: (startId: string, endId: string, points: RoutePoint[]) => void;
  // onRouteDistanceChange —É–±–∏—Ä–∞–µ–º - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ö—É–∫–µ
}

interface Driver {
  id: string;
  fullName?: string;
  phoneNumber?: string;
  currentLocation?: { latitude: number; longitude: number };
  [key: string]: unknown;
}

interface UseOrderLocationsResult {
  // –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
  routePoints: RoutePoint[];
  isReady: boolean;

  // –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
  mapLocations: GetLocationDTO[];
  mapCenter: { latitude: number; longitude: number };
  dynamicMapCenter: { latitude: number; longitude: number } | null;

  // –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  drivers: ActiveDriver[]; // –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
  allDrivers: Driver[]; // –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
  selectedDriver: Driver | null;
  openDriverPopupId: string | null;

  // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
  isModalOpen: boolean;
  modalTitle: string;
  selectedPointIndex: number | null;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  handlePointSelect: (index: number) => void;
  handleLocationSelect: (location: GetLocationDTO) => void;
  handlePointClear: (index: number) => void;
  handleMapBoundsChange: (bounds: MapBounds) => void;
  handleDriverSelect: (driver: Driver | null, location?: { latitude: number; longitude: number }, fromSearchPanel?: boolean) => void;
  handleLocationToggle: (location: GetLocationDTO, isSelected: boolean) => void;
  canSelectLocation: (location: GetLocationDTO) => boolean;
  addIntermediatePoint: (location?: GetLocationDTO) => void;
  closeModal: () => void;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  getDriverById: (id: string) => Record<string, unknown> | null;
  loadDriverData: (id: string) => Promise<void>;
}

/**
 * –•—É–∫ –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –∫–∞—Ä—Ç—ã –∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∑–∞–∫–∞–∑–∞
 */
export const useOrderLocations = ({
  startLocationId,
  endLocationId,
  additionalStops = [],
  mode = 'create',
  rides,
  // –í–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  externalRoutePoints,
  setExternalRoutePoints,
  externalSelectedDriver,
  setExternalSelectedDriver,
  externalDynamicMapCenter,
  setExternalDynamicMapCenter,
  externalOpenDriverPopupId,
  setExternalOpenDriverPopupId,
  // –ö–æ–ª–±—ç–∫–∏
  onRouteChange,
  onRoutePointsChange
}: UseOrderLocationsParams): UseOrderLocationsResult => {

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [mapLocations, setMapLocations] = useState<GetLocationDTO[]>([]);
  const [allDrivers, setAllDrivers] = useState<Driver[]>([]); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–Ω–µ–ª–∏
  const [driversDataCache, setDriversDataCache] = useState<Record<string, Record<string, unknown>>>({}); // –ö—ç—à –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const [selectedPointIndex, setSelectedPointIndex] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalTitle, setModalTitle] = useState('');

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isInitializedRef = useRef(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ
  const [localRoutePoints, setLocalRoutePoints] = useState<RoutePoint[]>([
    { id: '1', location: null, type: 'start', label: '–û—Ç–∫—É–¥–∞' },
    { id: '2', location: null, type: 'end', label: '–ö—É–¥–∞' },
  ]);
  const [localSelectedDriver, setLocalSelectedDriver] = useState<Driver | null>(null);
  const [localDynamicMapCenter, setLocalDynamicMapCenter] = useState<{ latitude: number; longitude: number } | null>(null);
  const [localOpenDriverPopupId, setLocalOpenDriverPopupId] = useState<string | null>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
  const routePoints = externalRoutePoints ?? localRoutePoints;
  const setRoutePoints = setExternalRoutePoints ?? setLocalRoutePoints;
  const selectedDriver = externalSelectedDriver ?? localSelectedDriver;
  const setSelectedDriver = setExternalSelectedDriver ?? setLocalSelectedDriver;
  const dynamicMapCenter = externalDynamicMapCenter ?? localDynamicMapCenter;
  const setDynamicMapCenter = setExternalDynamicMapCenter ?? setLocalDynamicMapCenter;
  const openDriverPopupId = externalOpenDriverPopupId ?? localOpenDriverPopupId;
  const setOpenDriverPopupId = setExternalOpenDriverPopupId ?? setLocalOpenDriverPopupId;

  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
  const { fetchAllLocations } = useLocations();
  const { drivers, updateMapBounds } = useActiveDrivers();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π)
  useEffect(() => {
    const initialBounds: MapBounds = {
      latFrom: 42.82,
      latTo: 42.98,
      longFrom: 74.45,
      longTo: 74.7,
    };

    updateMapBounds(initialBounds);
  }, [updateMapBounds]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
  useEffect(() => {
    // eslint-disable-next-line no-console
    console.log('üîÑ useOrderLocations: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–∫–∞—Ü–∏–π:', {
      mode,
      startLocationId,
      endLocationId,
      additionalStopsLength: additionalStops?.length,
      mapLocationsLength: mapLocations.length
    });

    if (mode === 'edit' && (startLocationId || endLocationId || additionalStops?.length)) {
      // eslint-disable-next-line no-console
      console.log('üîÑ useOrderLocations: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ edit');

      fetchAllLocations().then(locations => {
        // eslint-disable-next-line no-console
        console.log('‚úÖ useOrderLocations: –õ–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', locations.length);
        setMapLocations(locations);
      });
    } else if (mode === 'create') {
      // eslint-disable-next-line no-console
      console.log('üîÑ useOrderLocations: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ create');

      fetchAllLocations().then(locations => {
        // eslint-disable-next-line no-console
        console.log('‚úÖ useOrderLocations: –õ–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', locations.length);
        setMapLocations(locations);
      });
    }
  }, [mode, startLocationId, endLocationId, additionalStops, fetchAllLocations]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    const loadDriverInEditMode = async () => {
      if (mode === 'edit' && rides && rides.length > 0 && rides[0].driverId) {
        const driverId = rides[0].driverId;

        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
          const driverData = await usersApi.getDriver(driverId);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É –≤–æ–¥–∏—Ç–µ–ª—è
          if (driverData && driverData.currentLocation) {
            const { latitude, longitude } = driverData.currentLocation;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
            setSelectedDriver(driverData as unknown as Driver);

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –≤–æ–¥–∏—Ç–µ–ª—é
            setDynamicMapCenter({ latitude, longitude });

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º popup –≤–æ–¥–∏—Ç–µ–ª—è
            setOpenDriverPopupId(driverId);
          }
        } catch {
          // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
      }
    };

    loadDriverInEditMode();
  }, [mode, rides, setSelectedDriver, setDynamicMapCenter, setOpenDriverPopupId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–Ω–µ–ª–∏
  useEffect(() => {
    const fetchDrivers = async () => {
      try {
        const response = await apiClient.get<{
          data: Driver[];
          totalCount: number;
        }>('/User/Driver', {
          params: {
            First: true,
            Size: 1000,
            IsActive: true
          }
        });

        const drivers = Array.isArray(response.data?.data) ? response.data.data : [];

        setAllDrivers(drivers);
      } catch {
        setAllDrivers([]);
      }
    };

    fetchDrivers();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (mode === 'edit' && mapLocations.length > 0 && !isInitializedRef.current) {
      // eslint-disable-next-line no-console
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º routePoints –≤ —Ä–µ–∂–∏–º–µ edit', {
        startLocationId,
        endLocationId,
        additionalStops
      });

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ—á–∫–∏
      const newRoutePoints: RoutePoint[] = [
        { id: '1', location: null, type: 'start', label: '–û—Ç–∫—É–¥–∞' },
        { id: '2', location: null, type: 'end', label: '–ö—É–¥–∞' },
      ];

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
      if (startLocationId) {
        const startLocation = mapLocations.find(loc => loc.id === startLocationId);

        if (startLocation) {
          newRoutePoints[0] = { ...newRoutePoints[0], location: startLocation };
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
      if (endLocationId) {
        const endLocation = mapLocations.find(loc => loc.id === endLocationId);

        if (endLocation) {
          newRoutePoints[1] = { ...newRoutePoints[1], location: endLocation };
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (additionalStops && additionalStops.length > 0) {
        additionalStops.forEach((stopId, index) => {
          const stopLocation = mapLocations.find(loc => loc.id === stopId);

          if (stopLocation) {
            const intermediatePoint: RoutePoint = {
              id: `intermediate-${index}`,
              location: stopLocation,
              type: 'intermediate',
              label: `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${index + 1}`
            };

            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–Ω–µ—á–Ω–æ–π
            newRoutePoints.splice(newRoutePoints.length - 1, 0, intermediatePoint);
          }
        });
      }

      setRoutePoints(newRoutePoints);
      isInitializedRef.current = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    }
  }, [mode, mapLocations, startLocationId, endLocationId, additionalStops, setRoutePoints]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (mode !== 'edit') {
      isInitializedRef.current = false;
    }
  }, [mode]);

  // –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–±–ª–µ–º–Ω—ã–π useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è additionalStops
  // –ü–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º useEffect –≤—ã—à–µ

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è routePoints —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
  useEffect(() => {
    if (mode === 'edit' && onRoutePointsChange && routePoints.length > 0) {
      const startPoint = routePoints.find(p => p.type === 'start');
      const endPoint = routePoints.find(p => p.type === 'end');
      const intermediatePoints = routePoints.filter(p => p.type === 'intermediate' && p.location);

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
      if (intermediatePoints.length > 0) {
        // eslint-disable-next-line no-console
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è routePoints —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º (–µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ):', {
          startId: startPoint?.location?.id,
          endId: endPoint?.location?.id,
          intermediateCount: intermediatePoints.length,
          intermediateIds: intermediatePoints.map(p => p.location?.id),
          totalPoints: routePoints.length
        });
      }

      if (startPoint?.location && endPoint?.location) {
        onRoutePointsChange(startPoint.location.id, endPoint.location.id, routePoints);
      }
    }
  }, [mode, routePoints, onRoutePointsChange]);

  // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ–º –ª–æ–∫–∞—Ü–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isReady = useMemo(() => {
    if (mode === 'create') return true;
    if (mode === 'edit') {
      return (!startLocationId && !endLocationId && !additionalStops?.length) || mapLocations.length > 0;
    }

    return true;
  }, [mode, startLocationId, endLocationId, additionalStops, mapLocations.length]);

  // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
  const mapCenter = useMemo(() => {
    // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–¥–∏—Ç–µ–ª—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (dynamicMapCenter) {
      return dynamicMapCenter;
    }

    const routePointsWithLocation = routePoints.filter(point =>
      point.location &&
      typeof point.location.latitude === 'number' &&
      typeof point.location.longitude === 'number'
    );

    if (routePointsWithLocation.length > 0) {
      const firstPoint = routePointsWithLocation[0];
      
      return {
        latitude: firstPoint.location!.latitude,
        longitude: firstPoint.location!.longitude
      };
    }

    return { latitude: 42.9, longitude: 74.575 };
  }, [routePoints, dynamicMapCenter]);

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (onRouteChange) {
      onRouteChange(routePoints);
    }

    if (onRoutePointsChange) {
      const startPoint = routePoints.find(p => p.type === 'start');
      const endPoint = routePoints.find(p => p.type === 'end');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ ID, –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      const startId = startPoint?.location?.id || startLocationId || '';
      const endId = endPoint?.location?.id || endLocationId || '';

      onRoutePointsChange(startId, endId, routePoints);
    }
  }, [routePoints, onRouteChange, onRoutePointsChange, startLocationId, endLocationId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleMapBoundsChange = useCallback(async (bounds: MapBounds) => {
    updateMapBounds(bounds);
    // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–∫–∞—Ü–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ fetchAllLocations –æ–¥–∏–Ω —Ä–∞–∑
  }, [updateMapBounds]);

  const handlePointSelect = useCallback((index: number) => {
    setSelectedPointIndex(index);
    setModalTitle(routePoints[index].label);
    setIsModalOpen(true);
  }, [routePoints]);

  const handleLocationSelect = useCallback((location: GetLocationDTO) => {
    if (selectedPointIndex !== null) {
      const updatedPoints = [...routePoints];

      updatedPoints[selectedPointIndex] = {
        ...updatedPoints[selectedPointIndex],
        location,
      };
      setRoutePoints(updatedPoints);
      setSelectedPointIndex(null);
    }
    setIsModalOpen(false);
  }, [selectedPointIndex, routePoints, setRoutePoints]);

  const handlePointClear = useCallback((index: number) => {
    const currentPoints = [...routePoints];
    const pointToRemove = currentPoints[index];

    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞, —É–¥–∞–ª—è–µ–º –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (pointToRemove.type === 'intermediate') {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
      currentPoints.splice(index, 1);

      // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
      let intermediateCounter = 1;

      for (let i = 0; i < currentPoints.length; i++) {
        if (currentPoints[i].type === 'intermediate') {
          currentPoints[i] = {
            ...currentPoints[i],
            id: `intermediate-${intermediateCounter - 1}`,
            label: `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${intermediateCounter}`
          };
          intermediateCounter++;
        }
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ "–ö—É–¥–∞" –∏ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    else if (pointToRemove.type === 'end' && currentPoints.length > 2) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
      let lastIntermediateIndex = -1;

      for (let i = currentPoints.length - 2; i >= 0; i--) {
        if (currentPoints[i].type === 'intermediate') {
          lastIntermediateIndex = i;

          break;
        }
      }

      if (lastIntermediateIndex !== -1) {
        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –∫–æ–Ω–µ—á–Ω—É—é
        currentPoints[lastIntermediateIndex] = {
          ...currentPoints[lastIntermediateIndex],
          type: 'end',
          label: '–ö—É–¥–∞'
        };

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        currentPoints.splice(index, 1);

        // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        let intermediateCounter = 1;

        for (let i = 0; i < currentPoints.length; i++) {
          if (currentPoints[i].type === 'intermediate') {
            currentPoints[i] = {
              ...currentPoints[i],
              id: `intermediate-${intermediateCounter - 1}`,
              label: `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${intermediateCounter}`
            };
            intermediateCounter++;
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        currentPoints[index] = {
          ...currentPoints[index],
          location: null
        };
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ "–û—Ç–∫—É–¥–∞", –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –µ—ë
    else if (pointToRemove.type === 'start') {
      currentPoints[index] = {
        ...currentPoints[index],
        location: null
      };
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –µ—ë
    else {
      currentPoints[index] = {
        ...currentPoints[index],
        location: null
      };
    }

    setRoutePoints(currentPoints);
  }, [routePoints, setRoutePoints]);

  const handleDriverSelect = useCallback((driver: Driver | null, location?: { latitude: number; longitude: number }, fromSearchPanel: boolean = true) => {
    if (!driver) {
      // –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
      setSelectedDriver(null);
      setDynamicMapCenter(null);
      setOpenDriverPopupId(null);

      return;
    }

    setSelectedDriver(driver);

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞
    if (fromSearchPanel) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (location) {
        // –°–º–µ—â–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –≤–Ω–∏–∑, —á—Ç–æ–±—ã –≤–æ–¥–∏—Ç–µ–ª—å –±—ã–ª –≤–∏–¥–µ–Ω –Ω–∞–¥ –ø–∞–Ω–µ–ª—å—é
        // –ü–∞–Ω–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 200-250px —Å–Ω–∏–∑—É, —Å–º–µ—â–∞–µ–º –Ω–∞ ~0.0015 –≥—Ä–∞–¥—É—Å–∞ –≤–Ω–∏–∑
        const offsetLatitude = location.latitude - 0.0015;

        const newCenter = {
          latitude: offsetLatitude,
          longitude: location.longitude
        };

        setDynamicMapCenter(newCenter);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –≤–æ–¥–∏—Ç–µ–ª—è
        setOpenDriverPopupId(driver.id);

      } else {
        // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        const activeDriver = drivers.find(d => d.id === driver.id);

        if (activeDriver && activeDriver.currentLocation) {
          const offsetLatitude = activeDriver.currentLocation.latitude - 0.0015;

          const newCenter = {
            latitude: offsetLatitude,
            longitude: activeDriver.currentLocation.longitude
          };

          setDynamicMapCenter(newCenter);

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –≤–æ–¥–∏—Ç–µ–ª—è
          setOpenDriverPopupId(driver.id);
        } else {
          // –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å popup
          // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
          setOpenDriverPopupId(driver.id);
        }
      }
    }
    // –ï—Å–ª–∏ –≤—ã–±–æ—Ä –ù–ï –∏–∑ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞ (—Ç.–µ. –∏–∑ popup –Ω–∞ –∫–∞—Ä—Ç–µ), –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É
  }, [drivers, setSelectedDriver, setDynamicMapCenter, setOpenDriverPopupId]);

  const handleLocationToggle = useCallback((location: GetLocationDTO, isSelected: boolean) => {
    if (!isSelected) {
      // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
      const updatedPoints = routePoints.map(point => {
        if (point.location?.id === location.id) {
          return { ...point, location: null };
        }

        return point;
      });

      setRoutePoints(updatedPoints);

      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–æ—á–∫—É
    if (selectedPointIndex !== null && selectedPointIndex >= 0) {
      const updatedPoints = [...routePoints];

      updatedPoints[selectedPointIndex] = {
        ...updatedPoints[selectedPointIndex],
        location: location
      };
      setRoutePoints(updatedPoints);
      setSelectedPointIndex(null);
      setIsModalOpen(false);
    } else {
      const emptyPointIndex = routePoints.findIndex(point => !point.location);

      if (emptyPointIndex !== -1) {
        const updatedPoints = [...routePoints];
        
        updatedPoints[emptyPointIndex] = {
          ...updatedPoints[emptyPointIndex],
          location: location
        };
        setRoutePoints(updatedPoints);
      }
    }
  }, [routePoints, selectedPointIndex, setRoutePoints]);

  const canSelectLocation = useCallback((location: GetLocationDTO) => {
    // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
    const isLocationSelected = routePoints.some(point => point.location?.id === location.id);

    if (isLocationSelected) return true;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
    if (selectedPointIndex !== null && selectedPointIndex >= 0) return true;

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ —Ç–æ—á–∫–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–µ, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
    const hasEmptyPoints = routePoints.some(point => !point.location);

    return hasEmptyPoints;
  }, [routePoints, selectedPointIndex]);

  const addIntermediatePoint = useCallback((location?: GetLocationDTO) => {
    if (routePoints.length >= 5) return; // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–æ—á–µ–∫

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    const intermediateCount = routePoints.filter(p => p.type === 'intermediate').length;

    const newPoint: RoutePoint = {
      id: `intermediate-${intermediateCount}`,
      location: location || null,
      type: 'intermediate',
      label: `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${intermediateCount + 1}`,
    };

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–æ–π (–∫–æ–Ω–µ—á–Ω–æ–π)
    const updatedPoints = [...routePoints];

    updatedPoints.splice(-1, 0, newPoint);
    setRoutePoints(updatedPoints);
  }, [routePoints, setRoutePoints]);

  const closeModal = useCallback(() => {
    setIsModalOpen(false);
    setSelectedPointIndex(null);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
  const getDriverById = useCallback((id: string): Record<string, unknown> | null => {
    return driversDataCache[id] || null;
  }, [driversDataCache]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
  const loadDriverData = useCallback(async (id: string): Promise<void> => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (driversDataCache[id]) {
      return;
    }

    try {
      const driverData = await usersApi.getDriver(id);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      setDriversDataCache(prev => ({
        ...prev,
        [id]: driverData as unknown as Record<string, unknown>
      }));
    } catch (error) {
      throw error;
    }
  }, [driversDataCache]);

  return {
    // –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
    routePoints,
    isReady,
    
    // –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    mapLocations,
    mapCenter,
    dynamicMapCenter,
    
    // –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    drivers, // –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
    allDrivers, // –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
    selectedDriver,
    openDriverPopupId,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è UI
    isModalOpen,
    modalTitle,
    selectedPointIndex,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlePointSelect,
    handleLocationSelect,
    handlePointClear,
    handleMapBoundsChange,
    handleDriverSelect,
    handleLocationToggle,
    canSelectLocation,
    addIntermediatePoint,
    closeModal,

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    getDriverById,
    loadDriverData
  };
};
