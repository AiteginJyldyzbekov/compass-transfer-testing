'use client';

import { useState, useMemo, useEffect, useRef, useCallback } from 'react';
import { logger } from '@shared/lib/logger';
import type { GetLocationDTO } from '@entities/locations/interface';

export interface RouteState {
  start: GetLocationDTO | null;
  additional: (GetLocationDTO | null)[]; // —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π, –º–æ–≥—É—Ç –±—ã—Ç—å null –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
  end: GetLocationDTO | null;
}

export type RoutePointType = 'start' | 'additional' | 'end';

export interface RoutePoint {
  type: RoutePointType;
  location: GetLocationDTO | null;
  label: string;
}

/**
 * –ü—Ä–∏–≤–æ–¥–∏–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –ª–æ–∫–∞—Ü–∏–π (–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ) –∫ –æ–±—ä–µ–∫—Ç—É RouteState
 */
const arrayToState = (locations: GetLocationDTO[]): RouteState => {
  if (locations.length === 0) return { start: null, additional: [], end: null };

  if (locations.length === 1) {
    return { start: locations[0], additional: [], end: null };
  }

  const start = locations[0];
  const end = locations[locations.length - 1];
  const additional = locations.length > 2 ? locations.slice(1, -1) : [];

  return { start, additional, end };
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RouteState –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –ª–æ–∫–∞—Ü–∏–π
 */
const stateToArray = (state: RouteState): GetLocationDTO[] => {
  const arr: (GetLocationDTO | null)[] = [];

  if (state.start) arr.push(state.start);
  // –§–∏–ª—å—Ç—Ä—É–µ–º null, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
  arr.push(...state.additional.filter(Boolean));
  if (state.end) arr.push(state.end);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–±–µ–∑ null)
  return arr.filter(Boolean) as GetLocationDTO[];
};

/**
 * –•—É–∫ –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞
 * –í—Å–µ–≥–¥–∞ —Ö—Ä–∞–Ω–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ start / additional[] / end –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –ø–ª–æ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º
 */
export const useRouteState = (
  externalLocations: GetLocationDTO[],
  onChange: (locations: GetLocationDTO[]) => void,
  maxPoints: number = 5,
) => {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–æ–ø—Å–æ–º
  const [state, setState] = useState<RouteState>(() => arrayToState(externalLocations));

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const userModifiedRef = useRef(false);
  const lastExternalIdsRef = useRef('');

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–∞
  useEffect(() => {
    const extIds = externalLocations.map(l => l.id).join(',');
    const intIds = stateToArray(state)
      .map(l => l.id)
      .join(',');

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —É–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    // 1. –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (lastExternalIds –ø—É—Å—Ç–æ–π) - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    // 2. –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∏ –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ - –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º

    const isFirstInit = lastExternalIdsRef.current === '';
    const externalChanged = extIds !== lastExternalIdsRef.current;
    const shouldSync =
      (isFirstInit || externalChanged) &&
      !(userModifiedRef.current && externalLocations.length === 0);

    if (shouldSync && extIds !== intIds) {
      logger.info('üîÑ useRouteState: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏:', {
        external: extIds,
        internal: intIds,
        isFirstInit,
        externalChanged,
        userModified: userModifiedRef.current,
        externalCount: externalLocations.length,
      });
      setState(arrayToState(externalLocations));
    }

    lastExternalIdsRef.current = extIds;
  }, [externalLocations, state]);

  // –£—Ç–∏–ª–∏—Ç–∞: —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª–∫—É
  const updateState = useCallback((next: RouteState) => {
    userModifiedRef.current = true; // ‚úÖ –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setState(next);
    onChange(stateToArray(next));
  }, [onChange]);

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –°–ü–ò–°–ö–ê –¢–û–ß–ï–ö =====
  const computeRoutePoints = (s: RouteState): RoutePoint[] => {
    const pts: RoutePoint[] = [
      { type: 'start', location: s.start, label: '–¢–æ—á–∫–∞ A (–Ω–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏)' },
    ];

    s.additional.forEach((loc, idx) => {
      pts.push({ type: 'additional', location: loc, label: `–î–æ–ø —Ç–æ—á–∫–∞ ${idx + 1}` });
    });
    pts.push({ type: 'end', location: s.end, label: '–¢–æ—á–∫–∞ B (–∫–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏)' });

    return pts;
  };

  /* =============================== –ú–µ—Ç–æ–¥—ã =============================== */
  const setStart = useCallback((location: GetLocationDTO | null) => {
    updateState({ ...state, start: location });
  }, [state, updateState]);

  const setEnd = useCallback((location: GetLocationDTO | null) => {
    updateState({ ...state, end: location });
  }, [state, updateState]);

  const addAdditional = useCallback((location: GetLocationDTO) => {
    // —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
    const emptyIndex = state.additional.findIndex(a => a === null);
    // –ñ—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• —Ç–æ—á–µ–∫ (–Ω–µ —Å—á–∏—Ç–∞—è start/end)
    const additionalCount = state.additional.filter(Boolean).length;
    const maxAdditional = Math.max(0, maxPoints - 2); // 2 —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ø–æ–¥ start –∏ end

    if (additionalCount >= maxAdditional) {
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ —Ç–æ—á–µ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    const totalPoints = (state.start ? 1 : 0) + additionalCount + (state.end ? 1 : 0);

    if (totalPoints >= maxPoints) {
      return;
    }

    const newAdditional = [...state.additional];

    if (emptyIndex !== -1) {
      newAdditional[emptyIndex] = location;
    } else {
      newAdditional.push(location);
    }
    updateState({ ...state, additional: newAdditional });
  }, [state, maxPoints, updateState]);

  const updateAdditional = useCallback((index: number, location: GetLocationDTO | null) => {
    const newAdditional = [...state.additional];

    // –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    while (index >= newAdditional.length) {
      newAdditional.push(null);
    }
    newAdditional[index] = location;
    updateState({ ...state, additional: newAdditional });
  }, [state, updateState]);

  // –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–Ω–µ–ª—å—é)
  const selectLocationForPoint = useCallback((location: GetLocationDTO, pointIndex: number) => {
    if (pointIndex === -1) {
      addAdditional(location);

      return;
    }
    const points = computeRoutePoints(state);
    const point = points[pointIndex];

    if (!point) return;

    switch (point.type) {
      case 'start':
        setStart(location);
        break;
      case 'end':
        setEnd(location);
        break;
      case 'additional':
        updateAdditional(pointIndex - 1, location); // index-1 –ø–æ—Ç–æ–º—É —á—Ç–æ start = 0
        break;
    }
  }, [state, addAdditional, setStart, setEnd, updateAdditional]);

  const removeRoutePoint = useCallback((pointIndex: number) => {
    const points = computeRoutePoints(state);
    const point = points[pointIndex];

    if (!point) return;

    switch (point.type) {
      case 'start':
        setStart(null);
        break;
      case 'end':
        setEnd(null);
        break;
      case 'additional':
        updateAdditional(pointIndex - 1, null);
        break;
    }
  }, [state, setStart, setEnd, updateAdditional]);

  const addAdditionalPoint = useCallback((location: GetLocationDTO) => addAdditional(location), [addAdditional]);

  /* =========================== Derivatives ============================= */
  const routePoints = useMemo(() => computeRoutePoints(state), [state]);
  const flatLocations = useMemo(() => stateToArray(state), [state]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã (toggle)
  const addLocationSmart = useCallback((location: GetLocationDTO) => {
    if (!state.start) {
      setStart(location);
    } else if (!state.end) {
      setEnd(location);
    } else {
      addAdditional(location);
    }
  }, [state, setStart, setEnd, addAdditional]);

  const removeLocationById = useCallback((locationId: string) => {
    if (state.start?.id === locationId) {
      setStart(null);

      return;
    }
    if (state.end?.id === locationId) {
      setEnd(null);

      return;
    }
    const idx = state.additional.findIndex(l => l?.id === locationId);

    if (idx >= 0) {
      updateAdditional(idx, null);
    }
  }, [state, setStart, setEnd, updateAdditional]);

  return {
    state,
    routePoints,
    flatLocations,
    // –ø–∞–Ω–µ–ª–∏
    selectLocationForPoint,
    removeRoutePoint,
    addAdditionalPoint,
    // –∫–∞—Ä—Ç–∞
    addLocationSmart,
    removeLocationById,
    // –ø—Ä—è–º—ã–µ —Å–µ—Ç—Ç–µ—Ä—ã –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
    setStart,
    setEnd,
  };
};
