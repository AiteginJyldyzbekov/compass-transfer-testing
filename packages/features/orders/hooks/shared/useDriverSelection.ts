'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { usersApi } from '@shared/api/users';
import { logger } from '@shared/lib/logger';
import type { GetTariffDTO } from '@entities/tariffs/interface';
import type { GetDriverDTO } from '@entities/users/interface';

/**
 * –•—É–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
 * SRP: –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞, –ø–æ–∏—Å–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
 * ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
 */
export const useDriverSelection = (
  selectedDriverId?: string,
  onDriverSelect?: (driverOrId: GetDriverDTO | string) => void,
  selectedTariff?: GetTariffDTO | null,
) => {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const [drivers, setDrivers] = useState<GetDriverDTO[]>([]);

  // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
  const getDriverById = useCallback((id: string) => {
    return drivers.find(driver => driver.id === id) || null;
  }, [drivers]);

  const searchDrivers = useCallback(async (query: string): Promise<GetDriverDTO[]> => {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    return drivers.filter(driver =>
      driver.fullName.toLowerCase().includes(query.toLowerCase())
    );
  }, [drivers]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadDrivers = async () => {
      try {
        const response = await usersApi.getDrivers({
          first: true,
          size: 100,
        });
        
        setDrivers(response.data);
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      }
    };

    loadDrivers();
  }, []);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const [isDriverListExpanded, setIsDriverListExpanded] = useState(false); // –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [driverSearchQuery, setDriverSearchQuery] = useState('');
  const [driverSearchResults, setDriverSearchResults] = useState<GetDriverDTO[]>([]);
  const [isDriverSearching, setIsDriverSearching] = useState(false);
  const isInitialized = useRef(false);

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
   * ‚úÖ –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ carType
   */
  const filterDriversByTariff = useCallback(
    (driversToFilter: GetDriverDTO[]) => {
      if (!selectedTariff?.carType) {
        // –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö
        return driversToFilter;
      }

      return driversToFilter.filter(driver => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
        const carType = driver.activeCar?.type;

        // –ï—Å–ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if (!carType) {
          return false;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å —Ç–∏–ø–æ–º –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
        return carType === selectedTariff.carType;
      });
    },
    [selectedTariff?.carType],
  );

  /**
   * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—ã–ª —Å–≤–µ—Ä—Ö—É
   */
  const sortDriversWithSelectedFirst = useCallback(
    (driversToSort: GetDriverDTO[]) => {
      if (!selectedDriverId) return driversToSort;
      const selectedDriver = driversToSort.find(d => d.id === selectedDriverId);
      const otherDrivers = driversToSort.filter(d => d.id !== selectedDriverId);

      return selectedDriver ? [selectedDriver, ...otherDrivers] : driversToSort;
    },
    [selectedDriverId],
  );

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  const sortDriversWithSelectedFirstRef = useRef(sortDriversWithSelectedFirst);
  const filterDriversByTariffRef = useRef(filterDriversByTariff);

  sortDriversWithSelectedFirstRef.current = sortDriversWithSelectedFirst;
  filterDriversByTariffRef.current = filterDriversByTariff;

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
   */
  const handleDriverSearch = useCallback(
    async (query: string) => {
      setDriverSearchQuery(query);
      // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
      if (query.trim() && !isDriverListExpanded) {
        setIsDriverListExpanded(true);
      }
      setIsDriverSearching(true);
      try {
        let results: GetDriverDTO[];

        if (!query.trim()) {
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
          results = drivers;
        } else {
          // –ò—â–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
          results = await searchDrivers(query);
          // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
          // –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª –≤—ã–±–æ—Ä
          if (selectedDriverId) {
            const selectedDriver = getDriverById(selectedDriverId);

            if (selectedDriver && !results.find(d => d.id === selectedDriverId)) {
              // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
              results = [selectedDriver, ...results];
            }
          }
        }

        // ‚úÖ –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
        const filteredResults = filterDriversByTariffRef.current(results);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –±—ã–ª —Å–≤–µ—Ä—Ö—É
        const sortedResults = sortDriversWithSelectedFirstRef.current(filteredResults);

        setDriverSearchResults(sortedResults);
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (selectedDriverId) {
          const selectedDriver = getDriverById(selectedDriverId);

          setDriverSearchResults(selectedDriver ? [selectedDriver] : []);
        } else {
          setDriverSearchResults([]);
        }
      } finally {
        setIsDriverSearching(false);
      }
    },
    [drivers, searchDrivers, selectedDriverId, getDriverById, isDriverListExpanded], // ‚úÖ –£–±–∏—Ä–∞–µ–º sortDriversWithSelectedFirst –∏ filterDriversByTariff
  );

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ handleDriverSearch
  const handleDriverSearchRef = useRef(handleDriverSearch);

  handleDriverSearchRef.current = handleDriverSearch;

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º handleDriverSearch –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  useEffect(() => {
    if (drivers.length > 0 && !isInitialized.current) {
      handleDriverSearchRef.current('');
      isInitialized.current = true;
    }
  }, [drivers.length]); // ‚úÖ –£–±–∏—Ä–∞–µ–º handleDriverSearch

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º sortDriversWithSelectedFirst –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  useEffect(() => {
    if (drivers.length > 0) {
      // ‚úÖ –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∞—Ä–∏—Ñ—É, –ø–æ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      const filteredDrivers = filterDriversByTariffRef.current(drivers);
      const sortedDrivers = sortDriversWithSelectedFirstRef.current(filteredDrivers);

      setDriverSearchResults(sortedDrivers);
    } else {
      // –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      setDriverSearchResults([]);
    }
  }, [drivers, selectedDriverId, selectedTariff?.carType]); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º selectedTariff?.carType

  /**
   * –í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  const selectDriver = useCallback(
    (driverOrId: GetDriverDTO | string) => {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
      if (driverOrId === '' || driverOrId === null || driverOrId === undefined) {
        onDriverSelect?.('');

        return;
      }
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è
      if (typeof driverOrId === 'object' && driverOrId?.id) {
        const driver = driverOrId;

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –≤—ã–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ "–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –≤–æ–¥–∏—Ç–µ–ª—è
        logger.info('üéØ selectDriver: –≤—ã–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è', driver.fullName, driver.id);
        onDriverSelect?.(driver);
        setIsDriverListExpanded(false);
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const driverId = driverOrId as string;

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –≤—ã–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID
        logger.info('üéØ selectDriver: –≤—ã–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID', driverId);
        onDriverSelect?.(driverId);
        setIsDriverListExpanded(false);
      }
    },
    [onDriverSelect], // ‚úÖ –£–±–∏—Ä–∞–µ–º selectedDriverId –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  );

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  const handleDriverSelection = useCallback(
    (driver: GetDriverDTO | string) => {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
      if (driver === '' || driver === null || driver === undefined) {
        onDriverSelect?.('');

        return;
      }
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è
      if (typeof driver === 'object') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å (activeCar –∏–ª–∏ activeCarId)
        if (!driver.activeCar && !driver.activeCarId) {
          logger.error('–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');

          return;
        }
        // –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (!driver.online && !driver.isAvailable) {
          logger.warn('–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å');
        }
      }
      // –í—ã–±–∏—Ä–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è - –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ ID
      selectDriver(driver);
    },
    [selectDriver, onDriverSelect],
  );

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const driversWithSelected = useCallback(() => {
    if (!selectedDriverId) return driverSearchResults;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const hasSelectedDriver = driverSearchResults.some(d => d.id === selectedDriverId);

    if (hasSelectedDriver) {
      return driverSearchResults;
    }
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    const selectedDriver = getDriverById(selectedDriverId);

    if (selectedDriver) {
      return [selectedDriver, ...driverSearchResults];
    }

    return driverSearchResults;
  }, [driverSearchResults, selectedDriverId, getDriverById]);

  return {
    drivers: driversWithSelected(), // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    getDriverById,
    isDriverListExpanded,
    setIsDriverListExpanded,
    driverSearchQuery,
    isDriverSearching,
    handleDriverSearch,
    handleDriverSelection,
  };
};
