/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
import { toast } from '@shared/lib/conditional-toast';
import type { NotificationHandler } from '@shared/hooks/signal/interface/NotificationHandler';
import { logger } from '@shared/lib/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
interface NotificationMessage {
  title?: string;
  content?: string;
  [key: string]: unknown;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SignalR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export class NotificationManager {
  private handlers = new Map<string, NotificationHandler<NotificationMessage>[]>();

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  registerHandler(type: string, handler: NotificationHandler<NotificationMessage>) {
    if (!this.handlers.has(type)) {
      this.handlers.set(type, []);
    }
    this.handlers.get(type)!.push(handler);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  handleNotification(type: string, data: unknown) {
    logger.info('üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { type, data });
    const handlers = this.handlers.get(type);

    if (handlers) {
      handlers.forEach(handler => handler(data as NotificationMessage));
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showToast(type, data as NotificationMessage);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private showToast(type: string, data: NotificationMessage) {
    const title = data.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    const content = data.content || '';

    switch (type) {
      case 'RideRequest':
      case 'RideRequestNotification':
        toast.info(`üöó ${title}: ${content}`);
        break;
      case 'RideAccepted':
      case 'RideAcceptedNotification':
        toast.success(`‚úÖ ${title}: ${content}`);
        break;
      case 'RideCancelled':
      case 'RideCancelledNotification':
        toast.warning(`‚ùå ${title}: ${content}`);
        break;
      case 'RideStarted':
      case 'RideStartedNotification':
        toast.success(`üöó ${title}: ${content}`);
        // this.handleRideStarted(data);
        break;
      case 'DriverArrivedNotification':
        toast.success(`üèÅ ${title}: ${content}`);
        break;
      case 'DriverHeadingNotification':
        toast.info(`üöó ${title}: ${content}`);
        break;
      case 'DriverCancelledNotification':
        toast.error(`‚ùå ${title}: ${content}`);
        break;
      case 'OrderConfirmedNotification':
        toast.success(`‚úÖ ${title}: ${content}`);
        break;
      case 'OrderCancelledNotification':
        toast.warning(`‚ùå ${title}: ${content}`, { type: 'order_cancelled' });
        break;
      case 'OrderCompletedNotification':
        toast.success(`üéâ ${title}: ${content}`, { type: 'order_success' });
        break;
      case 'RideRejectedNotification':
        toast.error(`‚ùå ${title}: ${content}`);
        break;
      case 'RideStartedNotification':
        toast.info(`üöÄ ${title}: ${content}`);
        break;
      case 'PaymentNotification':
        toast.info(`üí≥ ${title}: ${content}`);
        break;
      case 'PaymentReceivedNotification':
        toast.success(`üí∞ ${title}: ${content}`, { type: 'payment_success' });
        break;
      case 'PaymentFailedNotification':
        toast.error(`üí∏ ${title}: ${content}`);
        break;
      default:
        toast.info(`üì¢ ${title}: ${content}`);
    }
  }
}
export const notificationManager = new NotificationManager();
