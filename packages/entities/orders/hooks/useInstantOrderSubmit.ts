import { useMutation } from '@tanstack/react-query';
import { OrdersApi, type CreateInstantOrderRequest, type CreateInstantOrderByPartnerRequest } from '../api/orders';
import type { GetOrderDTO } from '../interface';

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è —Ö—É–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
export interface UseInstantOrderSubmitOptions {
  /** –ö–æ–ª–±—ç–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ */
  onSuccess?: (order: GetOrderDTO) => void;

  /** –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ */
  onError?: (error: Error) => void;

  /** –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞) */
  onSettled?: () => void;

  /** –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API */
  userRole?: 'admin' | 'operator' | 'partner' | 'driver';
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö—É–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
export interface UseInstantOrderSubmitResult {
  /** –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */
  createOrder: (data: CreateInstantOrderRequest | CreateInstantOrderByPartnerRequest) => void;

  /** –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */
  isLoading: boolean;

  /** –û—à–∏–±–∫–∞ */
  error: Error | null;

  /** –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ */
  data: GetOrderDTO | null;

  /** –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  reset: () => void;
}

/**
 * –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
export function useInstantOrderSubmit(
  options: UseInstantOrderSubmitOptions = {}
): UseInstantOrderSubmitResult {
  const { onSuccess, onError, onSettled, userRole = 'operator' } = options;

  const mutation = useMutation({
    mutationFn: (data: CreateInstantOrderRequest | CreateInstantOrderByPartnerRequest) => {
      // eslint-disable-next-line no-console
      console.log('üì¶ useInstantOrderSubmit: –°–æ–∑–¥–∞–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑', data);

      // –î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π API
      if (userRole === 'partner') {
        return OrdersApi.createInstantOrderByPartner(data as CreateInstantOrderByPartnerRequest);
      }

      return OrdersApi.createInstantOrder(data as CreateInstantOrderRequest);
    },
    onSuccess: (data) => {
      // eslint-disable-next-line no-console
      console.log('‚úÖ useInstantOrderSubmit: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', data);
      onSuccess?.(data);
    },
    onError: (error: Error) => {
      // eslint-disable-next-line no-console
      console.error('‚ùå useInstantOrderSubmit: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞', error);
      onError?.(error);
    },
    onSettled,
  });

  return {
    createOrder: mutation.mutate,
    isLoading: mutation.isPending,
    error: mutation.error,
    data: mutation.data || null,
    reset: mutation.reset,
  };
}
