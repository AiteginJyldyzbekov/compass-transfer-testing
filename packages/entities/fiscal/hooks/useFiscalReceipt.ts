'use client';

import { useCallback, useState } from 'react';
import { showToast } from '@shared/toast';
import { fiscalService } from '../api/fiscal-service';
import { FiscalError } from '../interface/fiscal-error';
import type { TaxiReceiptData } from '../interface/fiscal-types';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥: –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∏–æ—Å–∫–µ)
const FISCAL_ENABLED = process.env.NEXT_PUBLIC_USE_FISCAL === 'true';

interface UseFiscalReceiptResult {
  isCreating: boolean;
  isChecking: boolean;
  createTaxiReceipt: (data: TaxiReceiptData) => Promise<boolean>;
  checkFiscalReadiness: () => Promise<boolean>;
  voidLastReceipt: () => Promise<boolean>;
  printReceiptImage: (rasterBase64: string) => Promise<boolean>;
  printReceiptLines: (data: {
    price: number;
    route: string;
    paymentMethod: string;
    orderId: string;
    driver?: { fullName: string };
    car?: { model: string; licensePlate: string };
  }) => Promise<boolean>;
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º–∏ —á–µ–∫–∞–º–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤ –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export const useFiscalReceipt = (): UseFiscalReceiptResult => {
  const [isCreating, setIsCreating] = useState(false);
  const [isChecking, setIsChecking] = useState(false);

  /* ===== –û–°–¢–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ï–°–õ–ò –§–ò–°–ö–ê–õ–ò–ó–ê–¶–ò–Ø –í–ö–õ–Æ–ß–ï–ù–ê ===== */

  /**
   * –°–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ç–∞–∫—Å–∏
   */
  const createTaxiReceipt = useCallback(
    async (data: TaxiReceiptData): Promise<boolean> => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', {
        FISCAL_ENABLED,
        env: process.env.NEXT_PUBLIC_USE_FISCAL,
      });

      if (!FISCAL_ENABLED) {
        console.warn(
          '‚ö†Ô∏è –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NEXT_PUBLIC_USE_FISCAL=true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è',
        );

        return true;
      }
      if (isCreating) {
        console.warn('‚ö†Ô∏è –ß–µ–∫ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å');

        return false;
      }

      setIsCreating(true);

      try {
        console.log('üßæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:', data);

        await fiscalService.createTaxiReceipt(data);

        showToast.success('‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:', error);

        if (error instanceof FiscalError) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
          if (error.isCritical) {
            showToast.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –§–ù: ${error.message}`);
          } else if (error.isPrintError) {
            showToast.warn(`‚ö†Ô∏è –ß–µ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: ${error.message}`);

            // –î–ª—è –æ—à–∏–±–æ–∫ –ø–µ—á–∞—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
            return true;
          } else {
            showToast.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
          }
        } else {
          showToast.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞');
        }

        return false;
      } finally {
        setIsCreating(false);
      }
    },
    [isCreating],
  );

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
   */
  const checkFiscalReadiness = useCallback(async (): Promise<boolean> => {
    if (!FISCAL_ENABLED) {
      return true;
    }
    if (isChecking) {
      return false;
    }

    setIsChecking(true);

    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è...');

      const { isReady, issues } = await fiscalService.checkReadiness();

      if (isReady) {
        console.log('‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

        return true;
      } else {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–º:', issues);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (issues.length > 0) {
          showToast.warn(`‚ö†Ô∏è –§–ù: ${issues[0]}`);
        }

        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ù:', error);
      showToast.error('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –§–ù');

      return false;
    } finally {
      setIsChecking(false);
    }
  }, [isChecking]);

  /**
   * –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫
   */
  const voidLastReceipt = useCallback(async (): Promise<boolean> => {
    if (!FISCAL_ENABLED) return true;
    try {
      console.log('‚ùå –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫...');

      await fiscalService.voidReceipt();

      showToast.success('‚úÖ –ß–µ–∫ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω');
      console.log('‚úÖ –ß–µ–∫ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞:', error);

      if (error instanceof FiscalError) {
        showToast.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      } else {
        showToast.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫');
      }

      return false;
    }
  }, []);

  /**
   * –ü–µ—á–∞—Ç—å —Ä–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞
   * @param rasterBase64 - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64
   */
  const printReceiptImage = useCallback(async (rasterBase64: string): Promise<boolean> => {
    console.log('üñ®Ô∏è –ü–µ—á–∞—Ç–∞–µ–º —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è
    if (!FISCAL_ENABLED) {
      console.log('üîÑ –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return true;
    }

    try {
      await fiscalService.printRaster(rasterBase64);
      console.log('‚úÖ –†–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —Ä–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞:', error);
      
      if (error instanceof FiscalError) {
        showToast.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
      } else {
        showToast.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞');
      }

      return false;
    }
  }, []);

  /**
   * –ü–µ—á–∞—Ç—å —á–µ–∫–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  const printReceiptLines = useCallback(async (data: {
    price: number;
    route: string;
    paymentMethod: string;
    orderId: string;
    driver?: { fullName: string };
    car?: { model: string; licensePlate: string };
  }): Promise<boolean> => {
    console.log('üñ®Ô∏è –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–µ–∫ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è
    if (!FISCAL_ENABLED) {
      console.log('üîÑ –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å —á–µ–∫–∞');
      return true;
    }

    try {
      await fiscalService.printTaxiReceiptLines(data);
      console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–µ–∫ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–µ–∫–∞:', error);
      
      if (error instanceof FiscalError) {
        showToast.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞: ${error.message}`);
      } else {
        showToast.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —á–µ–∫');
      }

      return false;
    }
  }, []);

  return {
    isCreating,
    isChecking,
    createTaxiReceipt,
    checkFiscalReadiness,
    voidLastReceipt,
    printReceiptImage,
    printReceiptLines,
  };
};
